// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=purgeExpired_a40d176513
ROOST_METHOD_SIG_HASH=purgeExpired_e0f637c888

Scenario 1: Normal successful execution of the purgeExpired method

Details:
TestName: testNormalExecutionOfPurgeExpired
Description: This test is designed to verify the purgeExpired method's expected behavior when called under normal circumstances. The method should successfully delete all expired tokens from both the passwordTokenRepository and the tokenRepository.
Execution:
Arrange: No specific mocked data or setup is required as the purgeExpired method only involves interactions with the repositories.
Act: Invoke the purgeExpired method without any input parameters.
Assert: Assert that the deleteAllExpiredSince methods of both the passwordTokenRepository and tokenRepository were called with the current timestamp.
Validation:
 This assertion verifies that both the deleteAllExpiredSince methods were invoked accurately. The expected outcome is important to ensure that the purgeExpired method operates efficiently, removing all expired tokens from both repositories.

Scenario 2: Testing the purgeExpired method when the repositories throw an exception

Details:
TestName: testPurgeExpiredWhenRepositoriesThrowException
Description: This test should check the method's behavior when the deleteAllExpiredSince methods of either the passwordTokenRepository or tokenRepository failed or threw an exception.
Execution:
Arrange: Mock the passwordTokenRepository and tokenRepository so that they throw an exception when the deleteAllExpiredSince method is called.
Act: Call the purgeExpired method.
Assert: Exception should be expected and caught, assert that the exceptions captured are instances of the respective exceptions.
Validation:
This test helps to ensure that the purgeExpired method handles exceptions correctly when there is an error during the deletion process in any of the repositories.

Scenario 3: Testing the purgeExpired method when the repositories are null

Details:
TestName: testPurgeExpiredWhenRepositoriesAreNull
Description: This test should validate the method's behavior if either the passwordTokenRepository or the tokenRepository is null.
Execution:
Arrange: Set both the passwordTokenRepository and tokenRepository to null.
Act: Call the purgeExpired method.
Assert: Assert that a null pointer exception is thrown.
Validation:
This test ensures the purgeExpired method is robust enough to handle invalid states of the repositories and throws the appropriate exception if any one or both the repositories are null.

Note: Assumptions were made as details are limited. For a more comprehensive test suite, the details and specifications of the deleteAllExpiredSince() method, the repositories, and the system behavior after exceptions were thrown would need to be known.
*/

// ********RoostGPT********
package com.baeldung.task;

import com.baeldung.persistence.dao.PasswordResetTokenRepository;
import com.baeldung.persistence.dao.VerificationTokenRepository;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.time.Instant;
import java.util.Date;
import static org.mockito.Mockito.*;

public class TokensPurgeTaskPurgeExpiredTest {

	@InjectMocks
	TokensPurgeTask tokensPurgeTask;

	@Mock
	VerificationTokenRepository tokenRepository;

	@Mock
	PasswordResetTokenRepository passwordTokenRepository;

	@Before
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testNormalExecutionOfPurgeExpired() {
		Date now = Date.from(Instant.now());
		tokensPurgeTask.purgeExpired();
		verify(tokenRepository, times(1)).deleteAllExpiredSince(any(Date.class));
		verify(passwordTokenRepository, times(1)).deleteAllExpiredSince(any(Date.class));
	}

	@Test(expected = RuntimeException.class)
	public void testPurgeExpiredWhenRepositoriesThrowException() {
		doThrow(new RuntimeException()).when(passwordTokenRepository).deleteAllExpiredSince(any(Date.class));
		doThrow(new RuntimeException()).when(tokenRepository).deleteAllExpiredSince(any(Date.class));
		tokensPurgeTask.purgeExpired();
	}

	// Business logic needs improvement - NullPointerException not handled when
	// repositories are null

	@Test(expected = NullPointerException.class)
	public void testPurgeExpiredWhenRepositoriesAreNull() {
		tokenRepository = null;
		passwordTokenRepository = null;
		tokensPurgeTask.purgeExpired();
	}

}
