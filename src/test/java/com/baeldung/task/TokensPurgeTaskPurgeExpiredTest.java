// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=purgeExpired_a40d176513
ROOST_METHOD_SIG_HASH=purgeExpired_e0f637c888

Here are the JUnit test scenarios for the provided `purgeExpired` method:

Scenario 1: Verify expired password reset tokens are deleted

Details:
  TestName: expiredPasswordResetTokensAreDeleted
  Description: This test verifies that expired password reset tokens are deleted from the database when the `purgeExpired` method is called.
Execution:
  Arrange:
    - Create sample expired password reset tokens in the database.
    - Mock the `passwordTokenRepository` to return the sample tokens.
  Act:
    - Invoke the `purgeExpired` method.
  Assert:
    - Verify that the `deleteAllExpiredSince` method of `passwordTokenRepository` is called with the current date.
    - Verify that the expired password reset tokens are deleted from the database.
Validation:
  The assertion ensures that the `purgeExpired` method correctly identifies and deletes expired password reset tokens based on the current date. This test is important to maintain database integrity and remove unnecessary data.

Scenario 2: Verify expired verification tokens are deleted

Details:
  TestName: expiredVerificationTokensAreDeleted
  Description: This test verifies that expired verification tokens are deleted from the database when the `purgeExpired` method is called.
Execution:
  Arrange:
    - Create sample expired verification tokens in the database.
    - Mock the `verificationTokenRepository` to return the sample tokens.
  Act:
    - Invoke the `purgeExpired` method.
  Assert:
    - Verify that the `deleteAllExpiredSince` method of `verificationTokenRepository` is called with the current date.
    - Verify that the expired verification tokens are deleted from the database.
Validation:
  The assertion ensures that the `purgeExpired` method correctly identifies and deletes expired verification tokens based on the current date. This test is important to maintain database integrity and remove unnecessary data.

Scenario 3: Verify non-expired tokens are not deleted

Details:
  TestName: nonExpiredTokensAreNotDeleted
  Description: This test verifies that non-expired tokens (both password reset and verification) are not deleted from the database when the `purgeExpired` method is called.
Execution:
  Arrange:
    - Create sample non-expired password reset tokens and verification tokens in the database.
    - Mock the `passwordTokenRepository` and `verificationTokenRepository` to return the sample tokens.
  Act:
    - Invoke the `purgeExpired` method.
  Assert:
    - Verify that the non-expired password reset tokens and verification tokens are not deleted from the database.
Validation:
  The assertion ensures that the `purgeExpired` method only deletes expired tokens and does not affect non-expired tokens. This test is important to ensure data integrity and prevent accidental deletion of valid tokens.

Scenario 4: Verify behavior when no expired tokens exist

Details:
  TestName: noExpiredTokensExist
  Description: This test verifies the behavior of the `purgeExpired` method when there are no expired tokens in the database.
Execution:
  Arrange:
    - Ensure that there are no expired password reset tokens or verification tokens in the database.
    - Mock the `passwordTokenRepository` and `verificationTokenRepository` to return empty results.
  Act:
    - Invoke the `purgeExpired` method.
  Assert:
    - Verify that no exceptions are thrown.
    - Verify that the `deleteAllExpiredSince` method is still called on both repositories with the current date.
Validation:
  The assertion ensures that the `purgeExpired` method handles the scenario gracefully when there are no expired tokens to delete. This test is important to validate the robustness of the method and its ability to handle edge cases.

These test scenarios cover the main functionality of the `purgeExpired` method, including the deletion of expired password reset tokens and verification tokens, the preservation of non-expired tokens, and the handling of scenarios when no expired tokens exist. They ensure that the method behaves as expected and maintains data integrity in the database.
*/

// ********RoostGPT********
package com.baeldung.task;

import com.baeldung.persistence.dao.PasswordResetTokenRepository;
import com.baeldung.persistence.dao.VerificationTokenRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.time.Instant;
import java.util.Date;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class TokensPurgeTaskPurgeExpiredTest {

	@Mock
	private PasswordResetTokenRepository passwordTokenRepository;

	@Mock
	private VerificationTokenRepository tokenRepository;

	@InjectMocks
	private TokensPurgeTask tokensPurgeTask;

	private Date now;

	@Before
	public void setUp() {
		now = Date.from(Instant.now());
	}

	@Test
	public void expiredPasswordResetTokensAreDeleted() {
		// Act
		tokensPurgeTask.purgeExpired();
		// Assert
		verify(passwordTokenRepository).deleteAllExpiredSince(now);
	}

	@Test
	public void expiredVerificationTokensAreDeleted() {
		// Act
		tokensPurgeTask.purgeExpired();
		// Assert
		verify(tokenRepository).deleteAllExpiredSince(now);
	}

	// TODO: Add test case for non-expired tokens
	// Create sample non-expired password reset tokens and verification tokens in the
	// database
	// Mock the passwordTokenRepository and verificationTokenRepository to return the
	// sample tokens
	// Verify that the non-expired password reset tokens and verification tokens are not
	// deleted from the database

	@Test
	public void noExpiredTokensExist() {
		// Act
		tokensPurgeTask.purgeExpired();
		// Assert
		verify(passwordTokenRepository).deleteAllExpiredSince(any(Date.class));
		verify(tokenRepository).deleteAllExpiredSince(any(Date.class));
	}

}
