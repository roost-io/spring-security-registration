// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=authProvider_7ad301fa6d
ROOST_METHOD_SIG_HASH=authProvider_d88ae3e376

Scenario 1: Test User Details Service
  Details:
    TestName: setUserDetailsServiceTest.
    Description: This test aims to confirm that the User Detail Service is correctly set when the authProvider method is called.
  Execution:
    Arrange: Mock UserDetailsService.
    Act: Call authProvider method.
    Assert: Assert that the UserDetailService has been correctly set.
  Validation:
    This assertion checks if the UserDetailsService is properly set and that the method operates as expected. This is crucial because it determines whether user information can be correctly retrieved and handled by the application.

Scenario 2: Test Password Encoder
  Details:
    TestName: setPasswordEncoderTest.
    Description: This test aims to confirm that the PasswordEncoder is correctly set when the authProvider method is called.
  Execution:
    Arrange: Mock PasswordEncoder.
    Act: Invoke the authProvider method.
    Assert: Assert that the PasswordEncoder has been correctly set.
  Validation:
    This assertion ascertains whether the PasswordEncoder is properly set, which is essential for ensuring the secure handling and storage of user passwords.

Scenario 3: Test Custom Location Checker
  Details:
    TestName: setPostAuthenticationChecksTest.
    Description: This test checks if the Custom Location Checker is correctly set when the authProvider method is called, allowing the system to manage user location-based authentication.
  Execution:
    Arrange: Mock the DifferentLocationChecker.
    Act: Call the authProvider method.
    Assert: Assert that the DifferentLocationChecker has been correctly set.
  Validation:
    It affirms that the different location checker is effectively set for further verification in the login process, which is critical for maintaining system security in various environments.

Scenario 4: Test Auth Provider Type
  Details:
    TestName: checkAuthProviderTypeTest.
    Description: This test verifies that the returned object from the authProvider method is an instance of the customDaoAuthenticationProvider.
  Execution:
    Arrange: No additional arrangements are needed as we're examining the return type.
    Act: Invoke the authProvider method.
    Assert: Assert that the returned object is an instance of CustomAuthenticationProvider.
  Validation:
    It confirms that the expected type of authentication provider is offered by this method, ensuring consistency and integrity in the authentication process.
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import com.baeldung.security.google2fa.CustomAuthenticationProvider;
import com.baeldung.security.location.DifferentLocationChecker;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;

@RunWith(MockitoJUnitRunner.class)
public class SecSecurityConfigAuthProviderTest {

	@Mock
	private UserDetailsService userDetailsService;

	@Mock
	private PasswordEncoder passwordEncoder;

	@Mock
	private DifferentLocationChecker differentLocationChecker;

	@InjectMocks
	private CustomAuthenticationProvider authProvider;

	@Test
	public void setUserDetailsServiceTest() {
		authProvider.setUserDetailsService(userDetailsService);
		assertEquals(authProvider.getUserDetailsService(), userDetailsService);
	}

	@Test
	public void setPasswordEncoderTest() {
		authProvider.setPasswordEncoder(passwordEncoder);
		assertEquals(authProvider.getPasswordEncoder(), passwordEncoder);
	}

	@Test
	public void setPostAuthenticationChecksTest() {
		authProvider.setPostAuthenticationChecks(differentLocationChecker);
		assertEquals(authProvider.getPostAuthenticationChecks(), differentLocationChecker);
	}

	@Test
	public void checkAuthProviderTypeTest() {
		assertTrue(authProvider instanceof DaoAuthenticationProvider);
	}

}
