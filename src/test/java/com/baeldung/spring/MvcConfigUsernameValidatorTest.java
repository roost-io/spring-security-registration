// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=usernameValidator_9996ffc61a
ROOST_METHOD_SIG_HASH=usernameValidator_7c4c99dbaf

Based on the provided method and imports, here are the test scenarios for the usernameValidator method:

Scenario 1: Valid Email Address

Details:
  TestName: validEmailAddress
  Description: This test verifies that the usernameValidator method correctly validates a valid email address.
Execution:
  Arrange: Create an instance of the EmailValidator class using the usernameValidator method.
  Act: Invoke the isValid method of the EmailValidator instance with a valid email address.
  Assert: Assert that the isValid method returns true.
Validation:
  The assertion verifies that the EmailValidator correctly identifies a valid email address.
  This test ensures that the usernameValidator method returns an EmailValidator instance that can properly validate email addresses.

Scenario 2: Invalid Email Address - Missing @ Symbol

Details:
  TestName: invalidEmailAddressMissingAtSymbol
  Description: This test verifies that the usernameValidator method correctly invalidates an email address missing the @ symbol.
Execution:
  Arrange: Create an instance of the EmailValidator class using the usernameValidator method.
  Act: Invoke the isValid method of the EmailValidator instance with an email address missing the @ symbol.
  Assert: Assert that the isValid method returns false.
Validation:
  The assertion verifies that the EmailValidator correctly identifies an invalid email address missing the @ symbol.
  This test ensures that the usernameValidator method returns an EmailValidator instance that can properly invalidate email addresses without the @ symbol.

Scenario 3: Invalid Email Address - Missing Domain

Details:
  TestName: invalidEmailAddressMissingDomain
  Description: This test verifies that the usernameValidator method correctly invalidates an email address missing the domain part.
Execution:
  Arrange: Create an instance of the EmailValidator class using the usernameValidator method.
  Act: Invoke the isValid method of the EmailValidator instance with an email address missing the domain part.
  Assert: Assert that the isValid method returns false.
Validation:
  The assertion verifies that the EmailValidator correctly identifies an invalid email address missing the domain part.
  This test ensures that the usernameValidator method returns an EmailValidator instance that can properly invalidate email addresses without a domain.

Scenario 4: Invalid Email Address - Invalid Characters

Details:
  TestName: invalidEmailAddressInvalidCharacters
  Description: This test verifies that the usernameValidator method correctly invalidates an email address containing invalid characters.
Execution:
  Arrange: Create an instance of the EmailValidator class using the usernameValidator method.
  Act: Invoke the isValid method of the EmailValidator instance with an email address containing invalid characters.
  Assert: Assert that the isValid method returns false.
Validation:
  The assertion verifies that the EmailValidator correctly identifies an invalid email address containing invalid characters.
  This test ensures that the usernameValidator method returns an EmailValidator instance that can properly invalidate email addresses with invalid characters.

Scenario 5: Null Email Address

Details:
  TestName: nullEmailAddress
  Description: This test verifies that the usernameValidator method handles a null email address gracefully.
Execution:
  Arrange: Create an instance of the EmailValidator class using the usernameValidator method.
  Act: Invoke the isValid method of the EmailValidator instance with a null email address.
  Assert: Assert that the isValid method returns false.
Validation:
  The assertion verifies that the EmailValidator correctly handles a null email address and returns false.
  This test ensures that the usernameValidator method returns an EmailValidator instance that can properly handle null email addresses without throwing an exception.

These test scenarios cover different aspects of the usernameValidator method, including valid and invalid email addresses, edge cases like missing @ symbol or domain, invalid characters, and handling null input. They ensure that the EmailValidator instance returned by the usernameValidator method behaves as expected in various scenarios.
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.junit.MockitoJUnitRunner;
import com.baeldung.validation.EmailValidator;
import jakarta.validation.ConstraintValidatorContext;
import org.mockito.Mock;

@RunWith(MockitoJUnitRunner.class)
public class MvcConfigUsernameValidatorTest {

	@InjectMocks
	private MvcConfig mvcConfig;

	private EmailValidator emailValidator;

	@Mock
	private ConstraintValidatorContext context;

	@Before
	public void setUp() {
		emailValidator = mvcConfig.usernameValidator();
	}

	@Test
	public void validEmailAddress() {
		// Arrange
		String validEmail = "test@example.com";
		// Act
		boolean isValid = emailValidator.isValid(validEmail, context);
		// Assert
		Assert.assertTrue(isValid);
	}

	@Test
	public void invalidEmailAddressMissingAtSymbol() {
		// Arrange
		String invalidEmail = "testexample.com";
		// Act
		boolean isValid = emailValidator.isValid(invalidEmail, context);
		// Assert
		Assert.assertFalse(isValid);
	}

	@Test
	public void invalidEmailAddressMissingDomain() {
		// Arrange
		String invalidEmail = "test@";
		// Act
		boolean isValid = emailValidator.isValid(invalidEmail, context);
		// Assert
		Assert.assertFalse(isValid);
	}

	@Test
	public void invalidEmailAddressInvalidCharacters() {
		// Arrange
		String invalidEmail = "test@example.com!";
		// Act
		boolean isValid = emailValidator.isValid(invalidEmail, context);
		// Assert
		Assert.assertFalse(isValid);
	}

	@Test
	public void nullEmailAddress() {
		// Arrange
		String nullEmail = null;
		// Act
		boolean isValid = emailValidator.isValid(nullEmail, context);
		// Assert
		Assert.assertFalse(isValid);
	}

}
