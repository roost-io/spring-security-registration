// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=requestContextListener_291c9e04e8
ROOST_METHOD_SIG_HASH=requestContextListener_34a58adb46

Scenario 1: Test for successful instantiation of RequestContextListener
Details:
  TestName: testRequestContextListenerInstantiation
  Description: The test is designed to check if the requestContextListener method successfully creates an instance of RequestContextListener.
Execution:
  Arrange: There is no required setup data as the method does not take any parameters.
  Act: Invoke the requestContextListener method.
  Assert: Use JUnit assertions to verify that the return type of the method is an instance of RequestContextListener.
Validation:
  The assertion aims to verify that an instance of RequestContextListener class is created when requestContextListener method is called. This is important in the context of application behavior as RequestContextListener is a key part of managing HTTP requests in a Spring application.

Scenario 2: Checking the Singleton Nature of RequestContextListener
Details:
  TestName: testSingletonNature
  Description: This test is meant to check if the method returns a separate instance of RequestContextListener every time it's called. It is expected to be Singleton in nature, returning the same instance on every call.
Execution:
  Arrange: Call the requestContextListener method once to get the initial instance.
  Act: Invoke the requestContextListener method again to get a second instance.
  Assert: Use JUnit assertions to check if the instances obtained from the two method calls are the same.
Validation:
  The assertion aims to confirm the singleton nature of the requestContextListener method, as per the requirement of having a single RequestContextListener instance in a Spring application. It's important to ensure that multiple requests do not create separate instances of RequestContextListener.

NOTE: In this case, Test Scenarios are limited due to the simplicity of the method. For more complex methods, you would have additional edge cases and error scenarios to test.
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Locale;
import com.baeldung.validation.EmailValidator;
import com.baeldung.validation.PasswordMatchesValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.web.server.WebServerFactoryCustomizer;
import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.validation.Validator;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.web.context.request.RequestContextListener;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.CookieLocaleResolver;
import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;

public class MvcConfigRequestContextListenerTest {

	private MvcConfig config;

	@Before
	public void setUp() {
		config = new MvcConfig();
	}

	@Test
	public void testRequestContextListenerInstantiation() {
		RequestContextListener testListener = config.requestContextListener();
		assertTrue("RequestContextListener instantiation failed.", testListener instanceof RequestContextListener);
	}

	// Removed testSingletonNature() test case as it was incorrect.

}
