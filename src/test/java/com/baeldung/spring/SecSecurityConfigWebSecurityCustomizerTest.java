// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=webSecurityCustomizer_995e67c875
ROOST_METHOD_SIG_HASH=webSecurityCustomizer_cf25e5c3a2

Here are the JUnit test scenarios for the provided webSecurityCustomizer() method:

Scenario 1: Verify ignoring resources and H2 console paths

Details:
  TestName: ignoresResourcesAndH2Paths
  Description: This test verifies that the webSecurityCustomizer correctly ignores requests matching the "/resources/**" and "/h2/**" patterns, allowing access to static resources and the H2 console without authentication.
Execution:
  Arrange: Set up a mock web security configurer and an AntPathRequestMatcher with the patterns "/resources/**" and "/h2/**".
  Act: Invoke the webSecurityCustomizer with the mock web security configurer.
  Assert: Verify that the ignoring() method is called on the mock web security configurer with the expected AntPathRequestMatcher.
Validation:
  The assertion ensures that the webSecurityCustomizer correctly configures the web security to ignore the specified paths, allowing unrestricted access to static resources and the H2 console.
  This test is important to validate that the application's security configuration does not interfere with serving static assets or accessing the H2 console for development and testing purposes.

Scenario 2: Verify no additional paths are ignored

Details:
  TestName: doesNotIgnoreAdditionalPaths
  Description: This test verifies that the webSecurityCustomizer does not ignore any paths other than "/resources/**" and "/h2/**", ensuring that all other paths are subject to authentication and authorization.
Execution:
  Arrange: Set up a mock web security configurer and an AntPathRequestMatcher with a pattern not matching "/resources/**" or "/h2/**".
  Act: Invoke the webSecurityCustomizer with the mock web security configurer.
  Assert: Verify that the ignoring() method is not called on the mock web security configurer with any AntPathRequestMatcher.
Validation:
  The assertion confirms that the webSecurityCustomizer does not accidentally ignore any unintended paths, maintaining the security of the application by requiring authentication and authorization for all paths except the explicitly specified ones.
  This test helps prevent security vulnerabilities that could arise from accidentally ignoring sensitive paths or exposing restricted resources.

Scenario 3: Verify case-sensitive path matching

Details:
  TestName: ignoresPathsInCaseSensitiveManners
  Description: This test verifies that the webSecurityCustomizer ignores paths in a case-sensitive manner, ensuring that only exact matches of "/resources/**" and "/h2/**" are ignored, while similar paths with different casing are not.
Execution:
  Arrange: Set up a mock web security configurer and AntPathRequestMatchers with patterns "/RESOURCES/**" and "/H2/**" (uppercase).
  Act: Invoke the webSecurityCustomizer with the mock web security configurer.
  Assert: Verify that the ignoring() method is not called on the mock web security configurer with the uppercase AntPathRequestMatchers.
Validation:
  The assertion validates that the webSecurityCustomizer strictly matches the specified paths in a case-sensitive manner, preventing unintended access to resources with similar but differently cased paths.
  This test ensures that the security configuration is precise and does not inadvertently ignore paths due to case insensitivity, reducing the risk of unauthorized access.

These test scenarios cover the essential aspects of the webSecurityCustomizer method, verifying that it correctly ignores the specified paths for static resources and the H2 console while maintaining security for all other paths. The tests also ensure that the path matching is case-sensitive to prevent unintended access.
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class SecSecurityConfigWebSecurityCustomizerTest {

	private SecSecurityConfig secSecurityConfig;

	@Mock
	private WebSecurity webSecurity;

	@BeforeEach
	void setUp() {
		secSecurityConfig = new SecSecurityConfig();
	}

	@Test
	void ignoresResourcesAndH2Paths() {
		// Arrange
		String[] expectedMatchers = { "/resources/**", "/h2/**" };

		// Act
		secSecurityConfig.webSecurityCustomizer().customize(webSecurity);

		// Assert
		verify(webSecurity).ignoring();
		verify(webSecurity).ignoring().antMatchers(expectedMatchers);
	}

	@Test
	void doesNotIgnoreAdditionalPaths() {
		// Arrange
		String[] unexpectedMatchers = { "/other/**" };

		// Act
		secSecurityConfig.webSecurityCustomizer().customize(webSecurity);

		// Assert
		verify(webSecurity, never()).ignoring().antMatchers(unexpectedMatchers);
	}

	@Test
	void ignoresPathsInCaseSensitiveManner() {
		// Arrange
		String[] uppercaseMatchers = { "/RESOURCES/**", "/H2/**" };

		// Act
		secSecurityConfig.webSecurityCustomizer().customize(webSecurity);

		// Assert
		verify(webSecurity, never()).ignoring().antMatchers(uppercaseMatchers);
	}

}
