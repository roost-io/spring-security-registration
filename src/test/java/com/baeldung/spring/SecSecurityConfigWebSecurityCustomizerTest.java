// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=webSecurityCustomizer_995e67c875
ROOST_METHOD_SIG_HASH=webSecurityCustomizer_cf25e5c3a2

"""
Scenario 1: Test ignoring specific URLs"

Details:
  TestName: testIgnoringUrls.
  Description: The test should check if URLs "/resources/**" and "/h2/**" are ignored by the WebSecurityCustomizer.
Execution:
  Arrange: Create a mock WebSecurityCustomizer object with some URL patterns.
  Act: Invoke the webSecurityCustomizer() on the WebSecurityCustomizer object.
  Assert: Confirm that "/resources/**" and "/h2/**" are included in the list of ignored URLs.
Validation:
  The assertion checks if the WebSecurityCustomizer works according to expectations. This is important to ensure that the application does not perform redundant security checks on ignored URLs.

Scenario 2: Test handling non-ignored URLs"

Details:
  TestName: testNonIgnoredUrls.
  Description: The test should check if other URLs are not ignored by the WebSecurityCustomizer.
Execution:
  Arrange: Create a mock WebSecurityCustomizer object with some URL patterns.
  Act: Invoke the webSecurityCustomizer() on the WebSecurityCustomizer object.
  Assert: Confirm that a non-ignored URL (say "/notIgnored/**") is not included in the list of ignored URLs.
Validation:
  This assertion is aimed to verify that only specific URLs are being ignored and the rest are receiving security checks as required. This ensures the full functionality of the WebSecurityCustomizer.

Scenario 3: Test handling of empty URL patterns"

Details:
  TestName: testEmptyUrlPatterns.
  Description: This test should check the behavior of the WebSecurityCustomizer when invoked with empty URL patterns.
Execution:
  Arrange: Create a mock WebSecurityCustomizer object with empty URL patterns.
  Act: Invoke the webSecurityCustomizer() on the WebSecurityCustomizer object.
  Assert: Check if the returned list of ignored URLs is empty.
Validation:
  This assertion verifies that the WebSecurityCustomizer reacts appropriately to empty URL patterns. Controlling for this edge case is crucial to ensure the resilience of the application security mechanism.

Scenario 4: Test the case of null URL patterns"

Details:
  TestName: testNullUrlPatterns.
  Description: This test should check if the WebSecurityCustomizer handles null URL patterns gracefully.
Execution:
  Arrange: Create a mock WebSecurityCustomizer object with null URL patterns.
  Act: Invoke the webSecurityCustomizer() on the WebSecurityCustomizer object.
  Assert: Check if a NullPointerException is thrown.
Validation:
  The test ensures that the method can gracefully handle null URL patterns. It ensures that potential exception related to null handling is being correctly implemented and handled.
"""
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Before;
import org.junit.runner.Runner;
import org.junit.runner.notification.RunNotifier;
import org.junit.runners.JUnit4;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer;
import org.springframework.security.config.annotation.web.configurers.RequestMatcherConfigurer;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;
import org.springframework.test.util.ReflectionTestUtils;

import static org.mockito.Mockito.verify;

public class SecSecurityConfigWebSecurityCustomizerTest {

	private SecSecurityConfig secSecurityConfigUnderTest;

	private RequestMatcherConfigurer.IgnoredRequestConfigurer ignoredRequestConfigurer;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		secSecurityConfigUnderTest = new SecSecurityConfig();
		ignoredRequestConfigurer = new RequestMatcherConfigurer(null).ignoring();
	}

	@Test
	public void testIgnoringUrls() {
		AntPathRequestMatcher expectedUrlPattern = new AntPathRequestMatcher("/resources/**", "/h2/**");
		secSecurityConfigUnderTest.webSecurityCustomizer().customize(ignoredRequestConfigurer);
		verify(ignoredRequestConfigurer).requestMatchers((RequestMatcher) expectedUrlPattern);
	}

}
