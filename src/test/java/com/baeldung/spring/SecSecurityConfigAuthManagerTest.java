// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=authManager_7be46ba56c
ROOST_METHOD_SIG_HASH=authManager_fa33eafe49

Here are the JUnit test scenarios for the provided authManager method:

Scenario 1: Successful Authentication Manager Creation

Details:
  TestName: successfulAuthenticationManagerCreation
  Description: This test verifies that the authManager method successfully creates an AuthenticationManager instance when provided with a valid HttpSecurity object and a properly configured AuthenticationProvider.
Execution:
  Arrange:
    - Create a mock or test instance of HttpSecurity.
    - Create a mock or test instance of AuthenticationManagerBuilder and set it as a shared object in the HttpSecurity instance.
    - Create a mock or test instance of CustomAuthenticationProvider and configure it with the necessary dependencies.
  Act:
    - Invoke the authManager method with the prepared HttpSecurity instance.
  Assert:
    - Assert that the returned object is an instance of AuthenticationManager.
Validation:
  The assertion verifies that the authManager method correctly retrieves the AuthenticationManagerBuilder from the HttpSecurity object, sets up the CustomAuthenticationProvider, and builds an AuthenticationManager instance. This test ensures that the authentication manager is properly created and ready to handle authentication requests.

Scenario 2: Authentication Provider Not Set

Details:
  TestName: authenticationProviderNotSet
  Description: This test checks the behavior of the authManager method when the AuthenticationProvider is not set or is null.
Execution:
  Arrange:
    - Create a mock or test instance of HttpSecurity.
    - Create a mock or test instance of AuthenticationManagerBuilder and set it as a shared object in the HttpSecurity instance.
    - Do not set or configure any AuthenticationProvider.
  Act:
    - Invoke the authManager method with the prepared HttpSecurity instance.
  Assert:
    - Assert that an appropriate exception (e.g., IllegalStateException) is thrown, indicating that the AuthenticationProvider is missing.
Validation:
  The assertion verifies that the authManager method throws an exception when the AuthenticationProvider is not properly configured. This test ensures that the method fails gracefully and provides a clear indication of the missing dependency, preventing the creation of an invalid AuthenticationManager.

Scenario 3: HttpSecurity Object Not Available

Details:
  TestName: httpSecurityObjectNotAvailable
  Description: This test verifies the behavior of the authManager method when the HttpSecurity object is not available or is null.
Execution:
  Arrange:
    - Set the HttpSecurity parameter to null.
  Act:
    - Invoke the authManager method with the null HttpSecurity parameter.
  Assert:
    - Assert that an appropriate exception (e.g., IllegalArgumentException) is thrown, indicating that the HttpSecurity object is required.
Validation:
  The assertion verifies that the authManager method throws an exception when the HttpSecurity object is not provided. This test ensures that the method fails gracefully and provides a clear indication of the missing dependency, preventing the creation of an AuthenticationManager without the necessary configuration.

Scenario 4: Custom Authentication Provider Integration

Details:
  TestName: customAuthenticationProviderIntegration
  Description: This test verifies that the authManager method correctly integrates and uses the CustomAuthenticationProvider when building the AuthenticationManager.
Execution:
  Arrange:
    - Create a mock or test instance of HttpSecurity.
    - Create a mock or test instance of AuthenticationManagerBuilder and set it as a shared object in the HttpSecurity instance.
    - Create a mock or test instance of CustomAuthenticationProvider and configure it with the necessary dependencies.
    - Set up the CustomAuthenticationProvider to return a specific Authentication object when authenticate method is called.
  Act:
    - Invoke the authManager method with the prepared HttpSecurity instance.
    - Use the returned AuthenticationManager to authenticate a sample Authentication object.
  Assert:
    - Assert that the CustomAuthenticationProvider's authenticate method is called with the sample Authentication object.
    - Assert that the returned Authentication object from the CustomAuthenticationProvider is the same as the one returned by the AuthenticationManager.
Validation:
  The assertions verify that the authManager method properly integrates the CustomAuthenticationProvider into the AuthenticationManager's authentication process. This test ensures that the custom authentication logic implemented in the CustomAuthenticationProvider is invoked and used correctly when authenticating requests.

These test scenarios cover different aspects of the authManager method, including successful creation, error handling, and integration with the CustomAuthenticationProvider. They ensure that the method behaves as expected under various conditions and provide confidence in its functionality within the application's security configuration.
*/

// ********RoostGPT********
package com.baeldung.spring;

import com.baeldung.security.google2fa.CustomAuthenticationProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.Authentication;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class SecSecurityConfigAuthManagerTest {

	@Mock
	private HttpSecurity httpSecurity;

	@Mock
	private AuthenticationManagerBuilder authManagerBuilder;

	@Mock
	private CustomAuthenticationProvider customAuthProvider;

	@InjectMocks
	private SecSecurityConfig secSecurityConfig;

	@BeforeEach
    void setUp() {
        when(httpSecurity.getSharedObject(AuthenticationManagerBuilder.class)).thenReturn(authManagerBuilder);
        when(authManagerBuilder.authenticationProvider(customAuthProvider)).thenReturn(authManagerBuilder);
    }

	@Test
    void successfulAuthenticationManagerCreation() {
        // Arrange
        when(authManagerBuilder.build()).thenReturn(mock(AuthenticationManager.class));
        // Act
        AuthenticationManager authManager = secSecurityConfig.authManager(httpSecurity);
        // Assert
        assertNotNull(authManager);
        verify(httpSecurity).getSharedObject(AuthenticationManagerBuilder.class);
        verify(authManagerBuilder).authenticationProvider(customAuthProvider);
        verify(authManagerBuilder).build();
    }

	@Test
    void authenticationProviderNotSet() {
        // Arrange
        when(authManagerBuilder.authenticationProvider(any())).thenReturn(authManagerBuilder);
        when(authManagerBuilder.build()).thenThrow(new IllegalStateException("AuthenticationProvider not set"));
        // Act & Assert
        assertThrows(IllegalStateException.class, () -> secSecurityConfig.authManager(httpSecurity));
        verify(httpSecurity).getSharedObject(AuthenticationManagerBuilder.class);
        verify(authManagerBuilder).authenticationProvider(customAuthProvider);
        verify(authManagerBuilder).build();
    }

	@Test
	void httpSecurityObjectNotAvailable() {
		// Act & Assert
		assertThrows(IllegalArgumentException.class, () -> secSecurityConfig.authManager(null));
		verifyNoInteractions(httpSecurity, authManagerBuilder, customAuthProvider);
	}

	@Test
	void customAuthenticationProviderIntegration() {
		// Arrange
		AuthenticationManager authManager = mock(AuthenticationManager.class);
		Authentication authentication = new UsernamePasswordAuthenticationToken("user", "password");
		when(authManagerBuilder.build()).thenReturn(authManager);
		when(customAuthProvider.authenticate(authentication)).thenReturn(authentication);
		// Act
		AuthenticationManager result = secSecurityConfig.authManager(httpSecurity);
		Authentication authenticatedUser = result.authenticate(authentication);
		// Assert
		assertSame(authManager, result);
		assertSame(authentication, authenticatedUser);
		verify(httpSecurity).getSharedObject(AuthenticationManagerBuilder.class);
		verify(authManagerBuilder).authenticationProvider(customAuthProvider);
		verify(authManagerBuilder).build();
		verify(customAuthProvider).authenticate(authentication);
	}

}
