// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=addInterceptors_5d1d0b4dd6
ROOST_METHOD_SIG_HASH=addInterceptors_416cc3e60a

"""
 Scenario 1: Valid Case Test for AddInterceptors Method

  Details:
    TestName: testValidAddInterceptors.
    Description: This test checks the functionality of the addInterceptors() method when handling typical inputs. The principal aim is to confirm that a new LocaleChangeInterceptor with the param name set to "lang" is rightly added to the InterceptorRegistry.
  Execution:
    Arrange: Create an instance of InterceptorRegistry.
    Act: Call the addInterceptors() method passing the created InterceptorRegistry instance.
    Assert: Verify if the registry contains the added LocaleChangeInterceptor.
  Validation:
    The assertion confirms that under usual situations, the addInterceptor() method can correctly add new Interceptors to the registry. This is important for ensuring correct locale management of the application.


 Scenario 2: Empty InterceptorRegistry Test

  Details:
    TestName: testAddInterceptorsToEmptyRegistry.
    Description: The purpose of this test is to determine how the addInterceptors() method behaves when a fresh/empty InterceptorRegistry is used. It focuses on the situation where no interceptors have yet been added to the registry.
  Execution:
    Arrange: Instantiate an empty InterceptorRegistry.
    Act: Invoke addInterceptors() providing the newly instantiated InterceptorRegistry.
    Assert: Check the registry now contains the added LocaleChangeInterceptor.
  Validation:
    The test verifies that the addInterceptors() method can add new interceptors to an initially empty InterceptorRegistry. This case tests the functionality of adding the very first interceptor.


 Scenario 3: Multiple Calls to AddInterceptors Method

  Details:
    TestName: testMultipleCallsToAddInterceptors.
    Description: This test is designed to validate that addInterceptors() can be called multiple times to add more than one interceptor.
  Execution:
    Arrange: Create an instance of InterceptorRegistry.
    Act: Call addInterceptors() multiple times, using the same InterceptorRegistry instance.
    Assert: Confirm that the registry contains all the added interceptors.
  Validation:
    The purpose of this test is to verify the ability of addInterceptors() to handle multiple invocations and add multiple interceptors to the same registry. It ensures that the method does not overwrite previous entries during multiple calls.

"""
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import java.util.Locale;
import com.baeldung.validation.EmailValidator;
import com.baeldung.validation.PasswordMatchesValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.web.server.WebServerFactoryCustomizer;
import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.validation.Validator;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.web.context.request.RequestContextListener;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.CookieLocaleResolver;

@RunWith(SpringJUnit4ClassRunner.class)
public class MvcConfigAddInterceptorsTest {

	@Test
	public void testAddInterceptors() {
		// Arrange
		InterceptorRegistry registry = Mockito.mock(InterceptorRegistry.class);
		MvcConfig config = new MvcConfig();
		LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();
		localeChangeInterceptor.setParamName("lang");

		// Act
		config.addInterceptors(registry);

		// Assert
		verify(registry, times(1)).addInterceptor(localeChangeInterceptor);
	}

	@Test
	public void testMultipleCallsToAddInterceptors() {
		// Arrange
		InterceptorRegistry registry = Mockito.mock(InterceptorRegistry.class);
		MvcConfig config = new MvcConfig();
		LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();
		localeChangeInterceptor.setParamName("lang");

		// Act
		config.addInterceptors(registry);
		config.addInterceptors(registry);

		// Assert
		verify(registry, times(2)).addInterceptor(localeChangeInterceptor);
	}

}
