// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=addInterceptors_5d1d0b4dd6
ROOST_METHOD_SIG_HASH=addInterceptors_416cc3e60a

Here are the test scenarios for the addInterceptors method:

Scenario 1: Verify LocaleChangeInterceptor is added to the registry

Details:
  TestName: localeChangeInterceptorAddedToRegistry
  Description: This test verifies that the LocaleChangeInterceptor is correctly added to the InterceptorRegistry with the expected parameter name.
Execution:
  Arrange: Create an instance of the InterceptorRegistry.
  Act: Invoke the addInterceptors method with the InterceptorRegistry instance.
  Assert: Verify that the LocaleChangeInterceptor is added to the registry using the registry.getInterceptors() method and checking if the interceptor is present in the returned array.
Validation:
  The assertion ensures that the LocaleChangeInterceptor is properly registered in the InterceptorRegistry.
  This test is important to confirm that the locale change functionality is correctly set up and will be triggered when the specified parameter is present in the request.

Scenario 2: Verify LocaleChangeInterceptor parameter name is set correctly

Details:
  TestName: localeChangeInterceptorParamNameSet
  Description: This test verifies that the LocaleChangeInterceptor's parameter name is set to the expected value of "lang".
Execution:
  Arrange: Create an instance of the InterceptorRegistry.
  Act: Invoke the addInterceptors method with the InterceptorRegistry instance.
  Assert: Retrieve the LocaleChangeInterceptor from the registry using registry.getInterceptors() and assert that its parameter name is set to "lang" using the getParamName() method.
Validation:
  The assertion ensures that the LocaleChangeInterceptor is configured with the correct parameter name.
  This test is crucial to ensure that the locale change functionality is triggered when the "lang" parameter is present in the request, as expected by the application.

Scenario 3: Verify no exception is thrown when adding the interceptor

Details:
  TestName: noExceptionThrownWhenAddingInterceptor
  Description: This test verifies that no exception is thrown when adding the LocaleChangeInterceptor to the InterceptorRegistry.
Execution:
  Arrange: Create an instance of the InterceptorRegistry.
  Act: Invoke the addInterceptors method with the InterceptorRegistry instance.
  Assert: No explicit assertion is needed, as the test will fail if an exception is thrown.
Validation:
  The absence of an exception confirms that the addInterceptors method executes successfully without any runtime errors.
  This test ensures the robustness of the addInterceptors method and its ability to handle the registration of the LocaleChangeInterceptor gracefully.

Scenario 4: Verify multiple interceptors can be added to the registry

Details:
  TestName: multipleInterceptorsAddedToRegistry
  Description: This test verifies that multiple interceptors can be added to the InterceptorRegistry without any conflicts.
Execution:
  Arrange: Create an instance of the InterceptorRegistry and create additional test interceptors.
  Act: Invoke the addInterceptors method with the InterceptorRegistry instance, and then add the test interceptors to the registry.
  Assert: Verify that all the interceptors, including the LocaleChangeInterceptor and the test interceptors, are present in the registry using the registry.getInterceptors() method.
Validation:
  The assertion ensures that the addInterceptors method does not interfere with the registration of other interceptors.
  This test is important to confirm that the addInterceptors method can coexist with other interceptor registrations and maintains the expected behavior of the InterceptorRegistry.

These test scenarios cover the key aspects of the addInterceptors method, including the registration of the LocaleChangeInterceptor, the correct configuration of its parameter name, the absence of exceptions, and the ability to add multiple interceptors to the registry.
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Before;
import org.junit.Test;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
import static org.junit.Assert.*;
import java.util.List;
import org.springframework.web.servlet.HandlerInterceptor;

public class MvcConfigAddInterceptorsTest {

	private InterceptorRegistry registry;

	private MvcConfig mvcConfig;

	@Before
	public void setUp() {
		registry = new InterceptorRegistry();
		mvcConfig = new MvcConfig();
	}

	@Test
	public void localeChangeInterceptorAddedToRegistry() {
		mvcConfig.addInterceptors(registry);
		List<HandlerInterceptor> interceptors = registry.getInterceptors();
		assertEquals(1, interceptors.size());
		assertTrue(interceptors.get(0) instanceof LocaleChangeInterceptor);
	}

	@Test
	public void localeChangeInterceptorParamNameSet() {
		mvcConfig.addInterceptors(registry);
		List<HandlerInterceptor> interceptors = registry.getInterceptors();
		LocaleChangeInterceptor interceptor = (LocaleChangeInterceptor) interceptors.get(0);
		assertEquals("lang", interceptor.getParamName());
	}

	@Test
	public void noExceptionThrownWhenAddingInterceptor() {
		mvcConfig.addInterceptors(registry);
		// No explicit assertion needed, test will fail if an exception is thrown
	}

	@Test
	public void multipleInterceptorsAddedToRegistry() {
		mvcConfig.addInterceptors(registry);
		// Create and add additional test interceptors
		TestInterceptor1 testInterceptor1 = new TestInterceptor1();
		TestInterceptor2 testInterceptor2 = new TestInterceptor2();
		registry.addInterceptor(testInterceptor1);
		registry.addInterceptor(testInterceptor2);
		List<HandlerInterceptor> interceptors = registry.getInterceptors();
		assertEquals(3, interceptors.size());
		assertTrue(interceptors.get(0) instanceof LocaleChangeInterceptor);
		assertTrue(interceptors.get(1) instanceof TestInterceptor1);
		assertTrue(interceptors.get(2) instanceof TestInterceptor2);
	}

	// Test interceptor classes for multipleInterceptorsAddedToRegistry test
	private static class TestInterceptor1 implements HandlerInterceptor {

	}

	private static class TestInterceptor2 implements HandlerInterceptor {

	}

}
