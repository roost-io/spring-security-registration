// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=differentLocationChecker_f688b0d971
ROOST_METHOD_SIG_HASH=differentLocationChecker_4ce47b81d8

Based on the provided method and imports, here are some test scenarios for the differentLocationChecker() method:

Scenario 1: Verify DifferentLocationChecker instance creation

Details:
  TestName: differentLocationCheckerReturnsInstance
  Description: This test verifies that the differentLocationChecker() method returns a new instance of the DifferentLocationChecker class.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the differentLocationChecker() method.
  Assert: Assert that the returned object is an instance of DifferentLocationChecker using assertInstanceOf.
Validation:
  The assertion ensures that the method correctly creates and returns a new instance of DifferentLocationChecker.
  This test is important to validate that the method behaves as expected and provides the necessary object for location checking functionality.

Scenario 2: Verify DifferentLocationChecker instance is not null

Details:
  TestName: differentLocationCheckerReturnsNonNullInstance
  Description: This test verifies that the differentLocationChecker() method does not return a null object.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the differentLocationChecker() method.
  Assert: Assert that the returned object is not null using assertNotNull.
Validation:
  The assertion ensures that the method does not return a null object, indicating that the instance creation is successful.
  This test is important to validate that the method provides a valid instance of DifferentLocationChecker for further usage.

Scenario 3: Verify multiple invocations return different instances

Details:
  TestName: differentLocationCheckerReturnsDifferentInstances
  Description: This test verifies that multiple invocations of the differentLocationChecker() method return different instances of DifferentLocationChecker.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the differentLocationChecker() method twice and store the returned instances.
  Assert: Assert that the two instances are not the same object using assertNotSame.
Validation:
  The assertion ensures that each invocation of the method creates a new instance of DifferentLocationChecker, rather than returning the same instance.
  This test is important to validate that the method behaves correctly and provides independent instances for location checking, avoiding any potential state sharing issues.

Scenario 4: Verify DifferentLocationChecker instance has expected methods

Details:
  TestName: differentLocationCheckerInstanceHasExpectedMethods
  Description: This test verifies that the instance returned by the differentLocationChecker() method has the expected methods defined in the DifferentLocationChecker class.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the differentLocationChecker() method to obtain an instance of DifferentLocationChecker.
  Assert: Assert that the instance has the expected methods (e.g., check) using assertThat and hasMethod from Hamcrest or other assertion libraries.
Validation:
  The assertion ensures that the returned instance of DifferentLocationChecker has the necessary methods available for location checking functionality.
  This test is important to validate that the instance is properly configured and ready to be used for its intended purpose.

Note: The actual implementation of the DifferentLocationChecker class and its methods are not provided in the given code snippet, so the test scenarios focus on the behavior and characteristics of the differentLocationChecker() method itself.
*/

// ********RoostGPT********
package com.baeldung.spring;

import com.baeldung.security.location.DifferentLocationChecker;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class SecSecurityConfigDifferentLocationCheckerTest {

	@Test
	public void differentLocationCheckerReturnsInstance() {
		// Arrange
		SecSecurityConfig secSecurityConfig = new SecSecurityConfig();

		// Act
		DifferentLocationChecker result = secSecurityConfig.differentLocationChecker();

		// Assert
		assertNotNull(result);
		assertTrue(result instanceof DifferentLocationChecker);
	}

	@Test
	public void differentLocationCheckerReturnsNonNullInstance() {
		// Arrange
		SecSecurityConfig secSecurityConfig = new SecSecurityConfig();

		// Act
		DifferentLocationChecker result = secSecurityConfig.differentLocationChecker();

		// Assert
		assertNotNull(result);
	}

	@Test
	public void differentLocationCheckerReturnsDifferentInstances() {
		// Arrange
		SecSecurityConfig secSecurityConfig = new SecSecurityConfig();

		// Act
		DifferentLocationChecker result1 = secSecurityConfig.differentLocationChecker();
		DifferentLocationChecker result2 = secSecurityConfig.differentLocationChecker();

		// Assert
		assertNotSame(result1, result2);
	}

	@Test
	public void differentLocationCheckerInstanceHasExpectedMethods() {
		// Arrange
		SecSecurityConfig secSecurityConfig = new SecSecurityConfig();

		// Act
		DifferentLocationChecker result = secSecurityConfig.differentLocationChecker();

		// Assert
		assertThat(result, hasProperty("check", notNullValue()));
	}

}
