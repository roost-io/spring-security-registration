// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createRoleIfNotFound_7b323bbc12
ROOST_METHOD_SIG_HASH=createRoleIfNotFound_d2ef1ab665

Scenario 1: Role Creation When Role does not Exist
  Details:
    TestName: createRoleWhenRoleDoesNotExist.
    Description: This scenario will test the function of creating a new role when that role does not previously exist.
  Execution:
    Arrange: Mock the RoleRepository method findByName to return null when the given role name is passed.
    Act: Invoke createRoleIfNotFound method with a role name and collection of privileges
    Assert: Assert that the returned role is not null and the privileges set are equal to the given collection of privileges.
  Validation:
    This test validates the role creation process when a role does not exist. The expected result is the created role because the method should successfully create a new role with the given privileges and return it.

Scenario 2: Role Update When Role Already Exists
  Details:
    TestName: updateRolePrivilegesWhenRoleExists.
    Description: This scenario will test the function of updating the privileges of an existing role.
  Execution:
    Arrange: Mock the RoleRepository method findByName to return an existing Role object when the given role name is passed.
    Act: Invoke createRoleIfNotFound method with the same role name and a new collection of privileges.
    Assert: Assert that the returned role's privileges are equal to the new given collection of privileges.
  Validation:
    This test validates the role update process when a role already exists. The expected result is the updated role because the method should successfully update the privileges of the existing role with the newly given privileges and return the role.

Scenario 3: Method Error Handling When Provided with Invalid Inputs
  Details:
    TestName: handleInvalidInputs.
    Description: This scenario tests the methodâ€™s capability to handle invalid inputs.
  Execution:
    Arrange: No Arrangement necessary for this scenario.
    Act: Invoke createRoleIfNotFound method with null input parameters.
    Assert: Assert that an IllegalArgumentException is thrown.
  Validation:
    This test validates that the method can properly handle invalid inputs. The expected result is an IllegalArgumentException, substantiating the requirement that the method should not accept null input parameters.
*/

// ********RoostGPT********
@RunWith(MockitoJUnitRunner.class)
public class SetupDataLoaderCreateRoleIfNotFoundTest {

	@InjectMocks
	SetupDataLoader setupDataLoader;

	@Mock
	RoleRepository roleRepository;

	@Test
	public void createRoleWhenRoleDoesNotExist() {
		final String roleName = "ROLE_NEW";
		Privilege privilege = new Privilege();
		privilege.setName("PRIVILEGE_NEW");
		List<Privilege> privileges = Arrays.asList(privilege);

		when(roleRepository.findByName(roleName)).thenReturn(null);
		when(roleRepository.save(any(Role.class))).thenAnswer(i -> i.getArguments()[0]);

		Role role = setupDataLoader.createRoleIfNotFound(roleName, privileges);
		assertNotNull(role);
		assertEquals(privileges, role.getPrivileges());
	}

	@Test
	public void updateRolePrivilegesWhenRoleExists() {
		final String roleName = "ROLE_EXISTING";
		Privilege privilege = new Privilege();
		privilege.setName("PRIVILEGE_NEW");
		List<Privilege> privileges = Arrays.asList(privilege);

		Role existingRole = new Role();
		existingRole.setName(roleName);

		when(roleRepository.findByName(roleName)).thenReturn(existingRole);
		when(roleRepository.save(any(Role.class))).thenAnswer(i -> i.getArguments()[0]);

		Role role = setupDataLoader.createRoleIfNotFound(roleName, privileges);

		assertEquals(privileges, role.getPrivileges());
	}

	@Test(expected = IllegalArgumentException.class)
	public void handleInvalidInputs() {
		setupDataLoader.createRoleIfNotFound(null, null);
	}

}
