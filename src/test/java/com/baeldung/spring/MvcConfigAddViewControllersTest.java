// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=addViewControllers_39b77a5577
ROOST_METHOD_SIG_HASH=addViewControllers_c2a37eaa9d

Here are the test scenarios for the addViewControllers method:

Scenario 1: Test adding view controller for root URL

Details:
  TestName: addViewControllerForRootUrl
  Description: This test verifies that a view controller is added for the root URL ("/") and it forwards to the "/login" view.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the root URL ("/") is added and it forwards to the "/login" view.
Validation:
  The assertion verifies that the root URL is properly mapped to the login page, ensuring that users are redirected to the login page when accessing the application's root URL.

Scenario 2: Test adding view controller for login remember me page

Details:
  TestName: addViewControllerForLoginRememberMe
  Description: This test checks if a view controller is added for the "/loginRememberMe" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/loginRememberMe" URL is added.
Validation:
  The assertion ensures that the "/loginRememberMe" URL is properly registered as a view controller, allowing users to access the login page with the "Remember Me" functionality.

Scenario 3: Test adding view controller for custom login page

Details:
  TestName: addViewControllerForCustomLogin
  Description: This test verifies that a view controller is added for the "/customLogin" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/customLogin" URL is added.
Validation:
  The assertion confirms that the "/customLogin" URL is correctly registered as a view controller, enabling users to access a custom login page.

Scenario 4: Test adding view controller for registration page

Details:
  TestName: addViewControllerForRegistration
  Description: This test checks if a view controller is added for the "/registration.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/registration.html" URL is added.
Validation:
  The assertion verifies that the "/registration.html" URL is properly registered as a view controller, allowing users to access the registration page.

Scenario 5: Test adding view controller for registration page with CAPTCHA

Details:
  TestName: addViewControllerForRegistrationCaptcha
  Description: This test verifies that a view controller is added for the "/registrationCaptcha.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/registrationCaptcha.html" URL is added.
Validation:
  The assertion ensures that the "/registrationCaptcha.html" URL is correctly registered as a view controller, enabling users to access the registration page with CAPTCHA validation.

Scenario 6: Test adding view controller for registration page with reCAPTCHA v3

Details:
  TestName: addViewControllerForRegistrationReCaptchaV3
  Description: This test checks if a view controller is added for the "/registrationReCaptchaV3.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/registrationReCaptchaV3.html" URL is added.
Validation:
  The assertion confirms that the "/registrationReCaptchaV3.html" URL is properly registered as a view controller, allowing users to access the registration page with reCAPTCHA v3 validation.

Scenario 7: Test adding view controller for logout page

Details:
  TestName: addViewControllerForLogout
  Description: This test verifies that a view controller is added for the "/logout.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/logout.html" URL is added.
Validation:
  The assertion ensures that the "/logout.html" URL is correctly registered as a view controller, enabling users to access the logout page.

Scenario 8: Test adding view controller for homepage

Details:
  TestName: addViewControllerForHomepage
  Description: This test checks if a view controller is added for the "/homepage.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/homepage.html" URL is added.
Validation:
  The assertion verifies that the "/homepage.html" URL is properly registered as a view controller, allowing users to access the application's homepage.

Scenario 9: Test adding view controller for expired account page

Details:
  TestName: addViewControllerForExpiredAccount
  Description: This test verifies that a view controller is added for the "/expiredAccount.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/expiredAccount.html" URL is added.
Validation:
  The assertion confirms that the "/expiredAccount.html" URL is correctly registered as a view controller, enabling users to access the expired account page.

Scenario 10: Test adding view controller for email error page

Details:
  TestName: addViewControllerForEmailError
  Description: This test checks if a view controller is added for the "/emailError.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/emailError.html" URL is added.
Validation:
  The assertion ensures that the "/emailError.html" URL is properly registered as a view controller, allowing users to access the email error page.

Scenario 11: Test adding view controller for home page

Details:
  TestName: addViewControllerForHome
  Description: This test verifies that a view controller is added for the "/home.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/home.html" URL is added.
Validation:
  The assertion confirms that the "/home.html" URL is correctly registered as a view controller, enabling users to access the application's home page.

Scenario 12: Test adding view controller for invalid session page

Details:
  TestName: addViewControllerForInvalidSession
  Description: This test checks if a view controller is added for the "/invalidSession.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/invalidSession.html" URL is added.
Validation:
  The assertion verifies that the "/invalidSession.html" URL is properly registered as a view controller, allowing users to access the invalid session page.

Scenario 13: Test adding view controller for admin page

Details:
  TestName: addViewControllerForAdmin
  Description: This test verifies that a view controller is added for the "/admin.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/admin.html" URL is added.
Validation:
  The assertion ensures that the "/admin.html" URL is correctly registered as a view controller, enabling users to access the admin page.

Scenario 14: Test adding view controller for successful registration page

Details:
  TestName: addViewControllerForSuccessfulRegistration
  Description: This test checks if a view controller is added for the "/successRegister.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/successRegister.html" URL is added.
Validation:
  The assertion confirms that the "/successRegister.html" URL is properly registered as a view controller, allowing users to access the successful registration page.

Scenario 15: Test adding view controller for forget password page

Details:
  TestName: addViewControllerForForgetPassword
  Description: This test verifies that a view controller is added for the "/forgetPassword.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/forgetPassword.html" URL is added.
Validation:
  The assertion ensures that the "/forgetPassword.html" URL is correctly registered as a view controller, enabling users to access the forget password page.

Scenario 16: Test adding view controller for update password page

Details:
  TestName: addViewControllerForUpdatePassword
  Description: This test checks if a view controller is added for the "/updatePassword.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/updatePassword.html" URL is added.
Validation:
  The assertion verifies that the "/updatePassword.html" URL is properly registered as a view controller, allowing users to access the update password page.

Scenario 17: Test adding view controller for change password page

Details:
  TestName: addViewControllerForChangePassword
  Description: This test verifies that a view controller is added for the "/changePassword.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/changePassword.html" URL is added.
Validation:
  The assertion confirms that the "/changePassword.html" URL is correctly registered as a view controller, enabling users to access the change password page.

Scenario 18: Test adding view controller for users page

Details:
  TestName: addViewControllerForUsers
  Description: This test checks if a view controller is added for the "/users.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/users.html" URL is added.
Validation:
  The assertion ensures that the "/users.html" URL is properly registered as a view controller, allowing users to access the users page.

Scenario 19: Test adding view controller for QR code page

Details:
  TestName: addViewControllerForQrCode
  Description: This test verifies that a view controller is added for the "/qrcode.html" URL.
Execution:
  Arrange: Create an instance of ViewControllerRegistry.
  Act: Invoke the addViewControllers method with the ViewControllerRegistry instance.
  Assert: Assert that the view controller for the "/qrcode.html" URL is added.
Validation:
  The assertion confirms that the "/qrcode.html" URL is correctly registered as a view controller, enabling users to access the QR code page.

These test scenarios cover all the view controllers added in the addViewControllers method, ensuring that each URL is properly registered and accessible. The scenarios validate the correct mapping of URLs to their respective views, contributing to the overall functionality and navigation of the application.
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Before;
import org.junit.Test;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import static org.mockito.Mockito.*;

public class MvcConfigAddViewControllersTest {

	private ViewControllerRegistry registry;

	@Before
	public void setUp() {
		registry = mock(ViewControllerRegistry.class);
	}

	@Test
	public void addViewControllerForRootUrl() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/");
		verify(registry.addViewController("/")).setViewName("forward:/login");
	}

	@Test
	public void addViewControllerForLoginRememberMe() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/loginRememberMe");
	}

	@Test
	public void addViewControllerForCustomLogin() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/customLogin");
	}

	@Test
	public void addViewControllerForRegistration() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/registration.html");
	}

	@Test
	public void addViewControllerForRegistrationCaptcha() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/registrationCaptcha.html");
	}

	@Test
	public void addViewControllerForRegistrationReCaptchaV3() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/registrationReCaptchaV3.html");
	}

	@Test
	public void addViewControllerForLogout() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/logout.html");
	}

	@Test
	public void addViewControllerForHomepage() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/homepage.html");
	}

	@Test
	public void addViewControllerForExpiredAccount() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/expiredAccount.html");
	}

	@Test
	public void addViewControllerForEmailError() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/emailError.html");
	}

	@Test
	public void addViewControllerForHome() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/home.html");
	}

	@Test
	public void addViewControllerForInvalidSession() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/invalidSession.html");
	}

	@Test
	public void addViewControllerForAdmin() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/admin.html");
	}

	@Test
	public void addViewControllerForSuccessfulRegistration() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/successRegister.html");
	}

	@Test
	public void addViewControllerForForgetPassword() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/forgetPassword.html");
	}

	@Test
	public void addViewControllerForUpdatePassword() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/updatePassword.html");
	}

	@Test
	public void addViewControllerForChangePassword() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/changePassword.html");
	}

	@Test
	public void addViewControllerForUsers() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/users.html");
	}

	@Test
	public void addViewControllerForQrCode() {
		MvcConfig mvcConfig = new MvcConfig();
		mvcConfig.addViewControllers(registry);
		verify(registry).addViewController("/qrcode.html");
	}

}
