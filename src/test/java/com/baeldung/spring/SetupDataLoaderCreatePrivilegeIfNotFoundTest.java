// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=createPrivilegeIfNotFound_b225fbc0ac
ROOST_METHOD_SIG_HASH=createPrivilegeIfNotFound_5b06b288c1

Here are the JUnit test scenarios for the provided createPrivilegeIfNotFound method:

Scenario 1: Privilege Exists

Details:
  TestName: privilegeExists()
  Description: This test checks if the method returns the existing privilege when the privilege with the given name already exists in the database.
Execution:
  Arrange: Create a test privilege and save it to the privilegeRepository.
  Act: Invoke the createPrivilegeIfNotFound method with the name of the existing privilege.
  Assert: Assert that the returned privilege is not null and has the same name as the test privilege.
Validation:
  The assertion verifies that the method correctly retrieves the existing privilege from the repository.
  This test ensures that the method does not create a duplicate privilege when one already exists.

Scenario 2: Privilege Not Found

Details:
  TestName: privilegeNotFound()
  Description: This test checks if the method creates a new privilege when the privilege with the given name does not exist in the database.
Execution:
  Arrange: Ensure that no privilege with the test name exists in the privilegeRepository.
  Act: Invoke the createPrivilegeIfNotFound method with a unique privilege name.
  Assert: Assert that the returned privilege is not null and has the same name as the provided name.
Validation:
  The assertion verifies that the method creates a new privilege and saves it to the repository when it doesn't exist.
  This test ensures that the method correctly handles the case when a privilege needs to be created.

Scenario 3: Null Privilege Name

Details:
  TestName: nullPrivilegeName()
  Description: This test checks if the method handles the case when a null privilege name is provided.
Execution:
  Arrange: No specific arrangement needed.
  Act: Invoke the createPrivilegeIfNotFound method with a null privilege name.
  Assert: Assert that an appropriate exception (e.g., IllegalArgumentException) is thrown.
Validation:
  The assertion verifies that the method throws an exception when a null privilege name is provided.
  This test ensures that the method validates the input and handles the null case appropriately.

Scenario 4: Empty Privilege Name

Details:
  TestName: emptyPrivilegeName()
  Description: This test checks if the method handles the case when an empty privilege name is provided.
Execution:
  Arrange: No specific arrangement needed.
  Act: Invoke the createPrivilegeIfNotFound method with an empty privilege name.
  Assert: Assert that an appropriate exception (e.g., IllegalArgumentException) is thrown.
Validation:
  The assertion verifies that the method throws an exception when an empty privilege name is provided.
  This test ensures that the method validates the input and handles the empty name case appropriately.

Scenario 5: Privilege Repository Save Failure

Details:
  TestName: privilegeRepositorySaveFailure()
  Description: This test checks if the method handles the case when saving the privilege to the repository fails.
Execution:
  Arrange: Mock the privilegeRepository to throw an exception when the save method is called.
  Act: Invoke the createPrivilegeIfNotFound method with a valid privilege name.
  Assert: Assert that an appropriate exception is thrown or handled gracefully.
Validation:
  The assertion verifies that the method handles the case when saving the privilege to the repository fails.
  This test ensures that the method has proper error handling and does not propagate the exception to the caller.

These test scenarios cover different aspects of the createPrivilegeIfNotFound method, including the cases when the privilege exists, when it needs to be created, and error handling scenarios such as null or empty privilege names and repository save failures.
*/

// ********RoostGPT********
package com.baeldung.spring;

import com.baeldung.persistence.dao.PrivilegeRepository;
import com.baeldung.persistence.model.Privilege;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class SetupDataLoaderCreatePrivilegeIfNotFoundTest {

	@Mock
	private PrivilegeRepository privilegeRepository;

	@InjectMocks
	private SetupDataLoader setupDataLoader;

	@Before
	public void setUp() {
		reset(privilegeRepository);
	}

	@Test
	public void privilegeExists() {
		String privilegeName = "TEST_PRIVILEGE";
		Privilege existingPrivilege = new Privilege(privilegeName);
		when(privilegeRepository.findByName(privilegeName)).thenReturn(existingPrivilege);

		Privilege result = setupDataLoader.createPrivilegeIfNotFound(privilegeName);

		assertNotNull(result);
		assertEquals(privilegeName, result.getName());
		verify(privilegeRepository, times(1)).findByName(privilegeName);
		verify(privilegeRepository, never()).save(any(Privilege.class));
	}

	@Test
	public void privilegeNotFound() {
		String privilegeName = "TEST_PRIVILEGE";
		when(privilegeRepository.findByName(privilegeName)).thenReturn(null);
		when(privilegeRepository.save(any(Privilege.class))).thenAnswer(i -> i.getArguments()[0]);

		Privilege result = setupDataLoader.createPrivilegeIfNotFound(privilegeName);

		assertNotNull(result);
		assertEquals(privilegeName, result.getName());
		verify(privilegeRepository, times(1)).findByName(privilegeName);
		verify(privilegeRepository, times(1)).save(any(Privilege.class));
	}

	@Test(expected = IllegalArgumentException.class)
	public void nullPrivilegeName() {
		setupDataLoader.createPrivilegeIfNotFound(null);
	}

	@Test(expected = IllegalArgumentException.class)
	public void emptyPrivilegeName() {
		setupDataLoader.createPrivilegeIfNotFound("");
	}

	@Test
	public void privilegeRepositorySaveFailure() {
		String privilegeName = "TEST_PRIVILEGE";
		when(privilegeRepository.findByName(privilegeName)).thenReturn(null);
		when(privilegeRepository.save(any(Privilege.class))).thenThrow(new RuntimeException("Save failed"));

		try {
			setupDataLoader.createPrivilegeIfNotFound(privilegeName);
			fail("Expected RuntimeException to be thrown");
		}
		catch (RuntimeException e) {
			assertEquals("Save failed", e.getMessage());
		}
	}

}
