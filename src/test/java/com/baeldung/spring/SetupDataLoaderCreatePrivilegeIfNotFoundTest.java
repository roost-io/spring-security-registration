// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createPrivilegeIfNotFound_b225fbc0ac
ROOST_METHOD_SIG_HASH=createPrivilegeIfNotFound_5b06b288c1

Scenario 1: Valid Privilege Creation Test

Details:
  TestName: createValidPrivilegeIfNotFound
  Description: This test is meant to check the successful creation of a new privilege when it is not found in the current list of privileges.
Execution:
  Arrange: Set up a call to "privilegeRepository.findByName(name)" to return null. Also, set up another call for "privilegeRepository.save(privilege)" to return the created privilege.
  Act: Invoke the method "createPrivilegeIfNotFound" with a valid privilege name.
  Assert: Use JUnit assertions to verify that the returned privilege is not null and the name matches the input.
Validation:
  The aim of the assertion is to verify that a new privilege is created. The importance of the test is to validate the functionality of the method to create a privilege if it does not already exist.

Scenario 2: Existing Privilege Retrieval Test

Details:
  TestName: retrieveExistingPrivilegeIfNotFound
  Description: This test checks if the method returns an existing privilege without creating a new one.
Execution:
  Arrange: Set up a call to "privilegeRepository.findByName(name)" to return an existing privilege.
  Act: Invoke the method "createPrivilegeIfNotFound" with the name of an existing privilege.
  Assert: Use JUnit assertions to verify that the returned privilege matches the initial privilege and no calls were made to "privilegeRepository.save(privilege)".
Validation:
  This verifies that the method will not create a new privilege if one with the same name already exists.

Scenario 3: Null Input Check Test

Details:
  TestName: checkNullInputForPrivilege
  Description: This test verifies that the method handles null input appropriately.
Execution:
  Arrange: No specific arrangement should be necessary for this test.
  Act: Invoke the method "createPrivilegeIfNotFound" with a null value.
  Assert: Use JUnit assertions to verify that an exception is thrown.
Validation:
  This test validates the method's error handling mechanism when null input is provided. It's important to ensure that the method doesn't throw unexpected errors and is able to handle invalid inputs.
*/

// ********RoostGPT********
package com.baeldung.spring;

import com.baeldung.persistence.dao.PrivilegeRepository;
import com.baeldung.persistence.model.Privilege;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.*;

public class SetupDataLoaderCreatePrivilegeIfNotFoundTest {

	@Mock
	private PrivilegeRepository privilegeRepository;

	@InjectMocks
	private SetupDataLoader setupDataLoader;

	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void createValidPrivilegeIfNotFound() {
		String name = "NEW_PRIVILEGE";
		when(privilegeRepository.findByName(name)).thenReturn(null);
		Privilege newPrivilege = new Privilege();
		newPrivilege.setName(name);
		when(privilegeRepository.save(newPrivilege)).thenReturn(newPrivilege);
		Privilege privilege = setupDataLoader.createPrivilegeIfNotFound(name);
		assertNotNull(privilege);
		assertEquals(newPrivilege.getName(), privilege.getName());
	}

	@Test
	public void retrieveExistingPrivilegeIfNotFound() {
		String name = "EXISTING_PRIVILEGE";
		Privilege existingPrivilege = new Privilege();
		existingPrivilege.setName(name);
		when(privilegeRepository.findByName(name)).thenReturn(existingPrivilege);
		Privilege privilege = setupDataLoader.createPrivilegeIfNotFound(name);
		assertEquals(existingPrivilege, privilege);
		verify(privilegeRepository, times(1)).findByName(name);
		verify(privilegeRepository, times(0)).save(any(Privilege.class));
	}

	@Test(expected = NullPointerException.class)
	public void checkNullInputForPrivilege() {
		setupDataLoader.createPrivilegeIfNotFound(null);
	}

}
