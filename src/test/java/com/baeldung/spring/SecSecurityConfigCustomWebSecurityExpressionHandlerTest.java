// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=customWebSecurityExpressionHandler_e6f0824726
ROOST_METHOD_SIG_HASH=customWebSecurityExpressionHandler_e099e00c57

"""
  Scenario 1: Test RoleHierarchy is properly set to SecurityExpressionHandler

  Details:
    TestName: testRoleHierarchyInExpressionHandler
    Description: This test is meant to check if the RoleHierarchy is set correctly in SecurityExpressionHandler. The main functionality being tested is the successful creation of the SecurityExpressionHandler, and whether the RoleHierarchy is being properly set.
  Execution:
    Arrange: Create a mock of 'RoleHierarchy' and instantiate 'DefaultWebSecurityExpressionHandler'.
    Act: Invoke the 'setRoleHierarchy()' method of the 'DefaultWebSecurityExpressionHandler' instance with the 'RoleHierarchy' mock as a parameter.
    Assert: Use JUnit assertions to check if the RoleHierarchy in the result SecurityExpressionHandler matches the mock.
  Validation:
    This assertion verifies that the RoleHierarchy is correctly set in the SecurityExpressionHandler. The expected result is for the RoleHierarchy in the SecurityExpressionHandler to match the mock, effectively testing that the 'setRoleHierarchy()' method works correctly.

  Scenario 2: Test Exception Handling with Null RoleHierarchy

  Details:
    TestName: testNullRoleHierarchy
    Description: This test is intended to handle the edge case where a null RoleHierarchy is passed to the 'setRoleHierarchy()' method of the 'DefaultWebSecurityExpressionHandler' instance.
  Execution:
    Arrange: Instantiate 'DefaultWebSecurityExpressionHandler'.
    Act: Invoke the 'setRoleHierarchy()' method with null as a parameter.
    Assert: Expect an exception to be thrown and validate using JUnit assertions.
  Validation:
    This validates that the method 'setRoleHierarchy()' is capable of handling null values. This is critical in ensuring robustness of the method, as null inputs could potentially lead to undesirable effects or security issues.

  Scenario 3: Test Various RoleHierarchies

  Details:
    TestName: testMultipleRoleHierarchies
    Description: This test is designed to assess the scenario with various RoleHierarchies.
  Execution:
    Arrange: Create multiple RoleHierarchy mocks and instantiate 'DefaultWebSecurityExpressionHandler'.
    Act: For each RoleHierarchy mock, invoke the 'setRoleHierarchy()' method of the 'DefaultWebSecurityExpressionHandler' instance and then validate.
    Assert: Use JUnit assertions to check if the RoleHierarchy in the result SecurityExpressionHandler matches the respective mock.
  Validation:
    This validates that the method 'setRoleHierarchy()' effectively works with various RoleHierarchies. This is significant in a real-world context where different roles may be assigned.

"""
*/

// ********RoostGPT********
package com.baeldung.spring;

import com.baeldung.security.google2fa.CustomAuthenticationProvider;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.security.access.hierarchicalroles.RoleHierarchy;
import org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler;
import org.springframework.security.web.access.expression.WebSecurityExpressionHandler;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class SecSecurityConfigCustomWebSecurityExpressionHandlerTest {

	private SecSecurityConfig secSecurityConfig;

	@Mock
	private RoleHierarchyImpl mockRoleHierarchy;

	@Before
	public void setUp() {
		secSecurityConfig = new SecSecurityConfig();
	}

	@Test
    public void testRoleHierarchyInExpressionHandler() {
        when(mockRoleHierarchy.toString()).thenReturn("MOCK_ROLE_HIERARCHY");
        // set mockRoleHierarchy in config
        secSecurityConfig.setRoleHierarchy(mockRoleHierarchy);

        WebSecurityExpressionHandler expressionHandler = secSecurityConfig.customWebSecurityExpressionHandler();
        RoleHierarchy roleHierarchyInExpressionHandler = ((DefaultWebSecurityExpressionHandler) expressionHandler).getRoleHierarchy();

        assertEquals(mockRoleHierarchy.toString(), roleHierarchyInExpressionHandler.toString());
    }

	@Test(expected = NullPointerException.class)
	public void testNullRoleHierarchy() {
		secSecurityConfig.setRoleHierarchy(null);

		WebSecurityExpressionHandler expressionHandler = secSecurityConfig.customWebSecurityExpressionHandler();
		RoleHierarchy roleHierarchyInExpressionHandler = ((DefaultWebSecurityExpressionHandler) expressionHandler)
			.getRoleHierarchy();

		assertNull(roleHierarchyInExpressionHandler);
	}

	@Test
    public void testMultipleRoleHierarchies() {
        when(mockRoleHierarchy.toString()).thenReturn("MOCK_ROLE_HIERARCHY_ONE");

        secSecurityConfig.setRoleHierarchy(mockRoleHierarchy);
        WebSecurityExpressionHandler expressionHandlerOne = secSecurityConfig.customWebSecurityExpressionHandler();
        RoleHierarchy roleHierarchyInExpressionHandlerOne = ((DefaultWebSecurityExpressionHandler) expressionHandlerOne).getRoleHierarchy();

        assertEquals(mockRoleHierarchy.toString(), roleHierarchyInExpressionHandlerOne.toString());

        when(mockRoleHierarchy.toString()).thenReturn("MOCK_ROLE_HIERARCHY_TWO");

        secSecurityConfig.setRoleHierarchy(mockRoleHierarchy);
        WebSecurityExpressionHandler expressionHandlerTwo = secSecurityConfig.customWebSecurityExpressionHandler();
        RoleHierarchy roleHierarchyInExpressionHandlerTwo = ((DefaultWebSecurityExpressionHandler) expressionHandlerTwo).getRoleHierarchy();

        assertEquals(mockRoleHierarchy.toString(), roleHierarchyInExpressionHandlerTwo.toString());
    }

}
