// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=restTemplate_5e646754df
ROOST_METHOD_SIG_HASH=restTemplate_ed7a24062c

Here are the JUnit test scenarios for the provided `restTemplate()` method:

Scenario 1: Verify RestTemplate Creation

Details:
  TestName: restTemplateCreation()
  Description: This test verifies that the `restTemplate()` method creates and returns a valid `RestTemplate` instance with the configured `ClientHttpRequestFactory`.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the `restTemplate()` method.
  Assert: Assert that the returned object is an instance of `RestTemplate` using `assertInstanceOf()`.
Validation:
  The assertion verifies that the `restTemplate()` method correctly creates and returns a `RestTemplate` instance.
  This test ensures that the basic functionality of creating a `RestTemplate` is working as expected.

Scenario 2: Verify ClientHttpRequestFactory Configuration

Details:
  TestName: clientHttpRequestFactoryConfiguration()
  Description: This test verifies that the `RestTemplate` instance returned by the `restTemplate()` method is configured with the `ClientHttpRequestFactory` returned by the `clientHttpRequestFactory()` method.
Execution:
  Arrange: Create a mock or stub implementation of `ClientHttpRequestFactory` and configure it to return a specific instance.
  Act: Invoke the `restTemplate()` method.
  Assert: Assert that the `ClientHttpRequestFactory` used by the returned `RestTemplate` instance matches the expected instance using `assertEquals()`.
Validation:
  The assertion verifies that the `RestTemplate` is properly configured with the `ClientHttpRequestFactory` returned by the `clientHttpRequestFactory()` method.
  This test ensures that the `RestTemplate` is using the correct `ClientHttpRequestFactory` configuration.

Scenario 3: Verify RestOperations Interface

Details:
  TestName: restOperationsInterface()
  Description: This test verifies that the `restTemplate()` method returns an object that implements the `RestOperations` interface.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the `restTemplate()` method.
  Assert: Assert that the returned object is an instance of `RestOperations` using `assertInstanceOf()`.
Validation:
  The assertion verifies that the `restTemplate()` method returns an object that adheres to the `RestOperations` interface.
  This test ensures that the returned `RestTemplate` instance can be used interchangeably with the `RestOperations` interface.

Scenario 4: Verify RestTemplate Singleton Behavior

Details:
  TestName: restTemplateSingletonBehavior()
  Description: This test verifies that multiple invocations of the `restTemplate()` method return the same `RestTemplate` instance, indicating singleton behavior.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the `restTemplate()` method multiple times.
  Assert: Assert that the returned `RestTemplate` instances are the same object using `assertSame()`.
Validation:
  The assertion verifies that the `restTemplate()` method returns the same `RestTemplate` instance across multiple invocations.
  This test ensures that the `RestTemplate` is managed as a singleton, preventing unnecessary object creation and promoting efficient resource utilization.

Scenario 5: Verify RestTemplate Error Handling

Details:
  TestName: restTemplateErrorHandling()
  Description: This test verifies that the `RestTemplate` instance returned by the `restTemplate()` method handles errors appropriately when making HTTP requests.
Execution:
  Arrange: Set up a mock server or use a test web server that returns an error response.
  Act: Invoke the `restTemplate()` method to make an HTTP request to the mock server.
  Assert: Assert that the `RestTemplate` throws the expected exception (e.g., `HttpClientErrorException`) using `assertThrows()`.
Validation:
  The assertion verifies that the `RestTemplate` correctly handles and propagates errors encountered during HTTP requests.
  This test ensures that the `RestTemplate` provides proper error handling mechanisms and allows the application to handle and respond to errors gracefully.

These test scenarios cover different aspects of the `restTemplate()` method, including creation, configuration, interface adherence, singleton behavior, and error handling. They help ensure the correctness and reliability of the `RestTemplate` instance returned by the method.
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.web.client.RestOperations;
import org.springframework.web.client.RestTemplate;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.SimpleClientHttpRequestFactory;

@RunWith(MockitoJUnitRunner.class)
public class CaptchaConfigRestTemplateTest {

	@Mock
	private ClientHttpRequestFactory clientHttpRequestFactory;

	@InjectMocks
	private CaptchaConfig captchaConfig;

	@Test
	public void restTemplateCreation() {
		RestOperations restOperations = captchaConfig.restTemplate();
		assertNotNull(restOperations);
		assertTrue(restOperations instanceof RestTemplate);
	}

	@Test
	public void clientHttpRequestFactoryConfiguration() {
		RestTemplate restTemplate = (RestTemplate) captchaConfig.restTemplate();
		assertEquals(clientHttpRequestFactory, restTemplate.getRequestFactory());
	}

	@Test
	public void restOperationsInterface() {
		RestOperations restOperations = captchaConfig.restTemplate();
		assertTrue(restOperations instanceof RestOperations);
	}

	@Test
	public void restTemplateSingletonBehavior() {
		RestOperations restOperations1 = captchaConfig.restTemplate();
		RestOperations restOperations2 = captchaConfig.restTemplate();
		assertSame(restOperations1, restOperations2);
	}

	@Test
	public void restTemplateErrorHandling() {
		RestTemplate restTemplate = (RestTemplate) captchaConfig.restTemplate();

		// Configure mock behavior for clientHttpRequestFactory
		when(clientHttpRequestFactory.createRequest(any(), any())).thenThrow(new RuntimeException("Mock exception"));

		// Assert that RestTemplate throws the expected exception
		assertThrows(RuntimeException.class, () -> restTemplate.getForObject("http://example.com", String.class));
	}

	// Add test case for timeout configuration
	@Test
	public void restTemplateTimeoutConfiguration() {
		// Create a SimpleClientHttpRequestFactory instance
		SimpleClientHttpRequestFactory simpleFactory = new SimpleClientHttpRequestFactory();

		// Set timeout values
		int connectTimeout = 5000;
		int readTimeout = 3000;
		simpleFactory.setConnectTimeout(connectTimeout);
		simpleFactory.setReadTimeout(readTimeout);

		// Create RestTemplate with the configured factory
		RestTemplate restTemplate = new RestTemplate(simpleFactory);

		// Assert the timeout values
		assertEquals(connectTimeout, simpleFactory.getConnectTimeout());
		assertEquals(readTimeout, simpleFactory.getReadTimeout());
	}

}
