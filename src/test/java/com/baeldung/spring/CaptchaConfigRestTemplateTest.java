// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=restTemplate_5e646754df
ROOST_METHOD_SIG_HASH=restTemplate_ed7a24062c

"""

Scenario 1: Normal Behaviour of restTemplate() method

Details:
TestName: checkRestTemplateCreation
Description: The test checks if the method successfully creates an instance of RestOperations with a proper clientHttpRequestFactory.
Execution:
  Arrange: No special arrangement is required as the method doesn't take parameters.
  Act: Calling the restTemplate() method.
  Assert: Assert that the created RestOperations instance is not null and is an instance of RestTemplate.
Validation:
  The assertion is verifying that an instance of RestTemplate was created successfully. This is required to ensure the restTemplate() method behaves as expected in a regular scenario.

Scenario 2: Validate ClientHttpRequestFactory in RestTemplate

Details:
TestName: checkHttpRequestFactoryInRestTemplate
Description: The test checks if the ClientHttpRequestFactory set in the RestTemplate object is of the correct type.
Execution:
  Arrange: No special arrangement is required as the method does not take parameters.
  Act: Call the restTemplate() method and get the request factory of the returned RestTemplate object.
  Assert: Assert that the request factory from the RestTemplate is not null and is an instance of SimpleClientHttpRequestFactory.
Validation:
  The assertion verifies that the correct request factory is being used in the RestTemplate. This is critical to ensure correct configuration and working of the RestTemplate.

Scenario 3: Behavior under Exceptional Circumstances

Details:
TestName: handleRestTemplateExceptions
Description: This test checks how the method handles exceptions during RestTemplate creation.
Execution:
  Arrange: Use reflection to inject a mock ClientHttpRequestFactory that throws an exception when called.
  Act: Call the restTemplate() method.
  Assert: Assert that an exception of the expected type is thrown.
Validation:
  The test verifies that when an exception occurs during the restTemplate method execution, it is handled gracefully. This is crucial for ensuring reliable behavior under exceptional conditions.

"""
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.web.client.RestOperations;
import static org.junit.Assert.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

public class CaptchaConfigRestTemplateTest {

	private CaptchaConfig captchaConfig;

	@Before
	public void setup() {
		captchaConfig = new CaptchaConfig();
	}

	@Test
	public void checkRestTemplateCreation() {
		RestOperations restTemplate = captchaConfig.restTemplate();

		assertNotNull(restTemplate);
		assertTrue(restTemplate instanceof RestTemplate);
	}

	@Test
	public void checkHttpRequestFactoryInRestTemplate() {
		RestTemplate restTemplate = (RestTemplate) captchaConfig.restTemplate();
		ClientHttpRequestFactory requestFactory = restTemplate.getRequestFactory();
		assertNotNull(requestFactory);
		assertTrue(requestFactory instanceof SimpleClientHttpRequestFactory);
	}

	@Test(expected = RuntimeException.class) // Exception type should be RuntimeException
	public void handleRestTemplateExceptions() throws Exception {
		CaptchaConfig mockCaptchaConfig = Mockito.mock(CaptchaConfig.class);
		Mockito.when(mockCaptchaConfig.clientHttpRequestFactory()).thenThrow(new RuntimeException());
		mockCaptchaConfig.restTemplate();
	}

}
