// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=passwordMatchesValidator_746c94c99d
ROOST_METHOD_SIG_HASH=passwordMatchesValidator_46cac83ccb

Based on the provided method and imports, here are the generated test scenarios:

Scenario 1: Valid Password Matches

Details:
  TestName: validPasswordMatches()
  Description: This test verifies that the passwordMatchesValidator method returns a valid PasswordMatchesValidator instance when invoked.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the passwordMatchesValidator method.
  Assert: Assert that the returned object is an instance of PasswordMatchesValidator using assertNotNull and assertTrue with instanceof.
Validation:
  The assertion verifies that the passwordMatchesValidator method successfully creates and returns a PasswordMatchesValidator object.
  This test ensures that the basic functionality of the passwordMatchesValidator method is working as expected.

Scenario 2: Password Matches Validator Reusability

Details:
  TestName: passwordMatchesValidatorReusability()
  Description: This test checks if multiple invocations of the passwordMatchesValidator method return distinct instances of PasswordMatchesValidator.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the passwordMatchesValidator method twice and store the returned instances in separate variables.
  Assert: Assert that the two instances are not the same object using assertNotSame.
Validation:
  The assertion verifies that each invocation of the passwordMatchesValidator method creates a new instance of PasswordMatchesValidator.
  This test ensures that the passwordMatchesValidator method does not return a shared or cached instance, promoting proper encapsulation and avoiding potential side effects.

Scenario 3: Password Matches Validator Null Check

Details:
  TestName: passwordMatchesValidatorNotNull()
  Description: This test verifies that the passwordMatchesValidator method does not return a null value.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the passwordMatchesValidator method.
  Assert: Assert that the returned object is not null using assertNotNull.
Validation:
  The assertion verifies that the passwordMatchesValidator method always returns a non-null instance of PasswordMatchesValidator.
  This test ensures that the method does not encounter any unexpected errors or return a null value, which could lead to null pointer exceptions in other parts of the application.

Note: Since the provided method is relatively simple and does not have any parameters or complex logic, the test scenarios are limited to basic functionality and object creation. If the PasswordMatchesValidator class has additional methods or behavior, more test scenarios can be added to cover those aspects as well.
*/

// ********RoostGPT********
package com.baeldung.spring;

import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import com.baeldung.validation.PasswordMatchesValidator;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = { MvcConfig.class })
@WebAppConfiguration
public class MvcConfigPasswordMatchesValidatorTest {

	@Autowired
	private MvcConfig mvcConfig;

	@Test
	public void validPasswordMatches() {
		// Arrange
		// No specific arrangement required

		// Act
		PasswordMatchesValidator validator = mvcConfig.passwordMatchesValidator();

		// Assert
		assertNotNull(validator);
		assertTrue(validator instanceof PasswordMatchesValidator);
	}

	@Test
	public void passwordMatchesValidatorReusability() {
		// Arrange
		// No specific arrangement required

		// Act
		PasswordMatchesValidator validator1 = mvcConfig.passwordMatchesValidator();
		PasswordMatchesValidator validator2 = mvcConfig.passwordMatchesValidator();

		// Assert
		assertNotSame(validator1, validator2);
	}

	@Test
	public void passwordMatchesValidatorNotNull() {
		// Arrange
		// No specific arrangement required

		// Act
		PasswordMatchesValidator validator = mvcConfig.passwordMatchesValidator();

		// Assert
		assertNotNull(validator);
	}

}
