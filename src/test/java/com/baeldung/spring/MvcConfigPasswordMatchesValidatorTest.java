// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=passwordMatchesValidator_746c94c99d
ROOST_METHOD_SIG_HASH=passwordMatchesValidator_46cac83ccb

Scenario 1: Password Matches Validator Instantiation Test

Details:
  TestName: testPasswordMatchesValidatorInstantiation()
  Description: This test is meant to check if the passwordMatchesValidator() method successfully instantiates and returns a PasswordMatchesValidator object.
Execution:
  Arrange: No preparation or mocks are needed as the test involves creation of a new object.
  Act: Invoke the passwordMatchesValidator() method.
  Assert: Assert that the return value is not null and is an instance of PasswordMatchesValidator class.
Validation:
  The assertion verifies that the passwordMatchesValidator() method generates a new object of type PasswordMatchesValidator. As this method's purpose is to provide a new instance of PasswordMatchesValidator, it is important to confirm that it returns a valid object.

Scenario 2: Password Matches Validator Separation Test

Details:
  TestName: testPasswordMatchesValidatorSeparation()
  Description: The test is to verify that the passwordMatchesValidator() method returns individual instances (separate objects) for each invocation.
Execution:
  Arrange: No preparation or mocks are needed as the test involves creation of new objects.
  Act: Invoke the passwordMatchesValidator() method twice and obtain two PasswordMatchesValidator objects.
  Assert: Assert that these two objects are not the same reference (using assertNotSame).
Validation:
  The assertion verifies that each call to passwordMatchesValidator() creates a new instance of PasswordMatchesValidator. This is a critical feature of methods that provide instances to ensure that individual operations do not interfere with each other.

Scenario 3: Password Matches Validator Type Check Test

Details:
  TestName: testPasswordMatchesValidatorTypeCheck()
  Description: The test aims to confirm that the passwordMatchesValidator() always returns a PasswordMatchesValidator object, and never another class type.
Execution:
  Arrange: No preparation or mocks are needed as the test involves checking the type of a new object.
  Act: Invoke the passwordMatchesValidator() method.
  Assert: Assert that the return value is indeed an instance of PasswordMatchesValidator class (using assertTrue and instanceof check).
Validation:
  The test verifies that the method passwordMatchesValidator() does not return any type other than PasswordMatchesValidator. This is critical to prevent unexpected behavior and to ensure that the created object can be used as expected.

*/

// ********RoostGPT********
package com.baeldung.spring;

import com.baeldung.validation.PasswordMatchesValidator;
import org.junit.Test;
import org.junit.Assert;

public class MvcConfigPasswordMatchesValidatorTest {

	@Test
	public void testPasswordMatchesValidatorInstantiation() {
		MvcConfig config = new MvcConfig();
		PasswordMatchesValidator validator = config.passwordMatchesValidator();

		Assert.assertNotNull("PasswordMatchesValidator object should not be null", validator);
		Assert.assertTrue("Object should be instance of PasswordMatchesValidator",
				validator instanceof PasswordMatchesValidator);
	}

	@Test
	public void testPasswordMatchesValidatorSeparation() {
		MvcConfig config = new MvcConfig();
		PasswordMatchesValidator validator1 = config.passwordMatchesValidator();
		PasswordMatchesValidator validator2 = config.passwordMatchesValidator();

		Assert.assertNotSame("Each invocation should return a separate PasswordMatchesValidator object", validator1,
				validator2);
	}

	@Test
	public void testPasswordMatchesValidatorTypeCheck() {
		MvcConfig config = new MvcConfig();
		Object returnVal = config.passwordMatchesValidator();

		Assert.assertTrue("Return value should be an instance of PasswordMatchesValidator",
				returnVal instanceof PasswordMatchesValidator);
	}

}
