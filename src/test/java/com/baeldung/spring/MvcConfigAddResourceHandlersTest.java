// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=addResourceHandlers_ec36c4e322
ROOST_METHOD_SIG_HASH=addResourceHandlers_41a692beca

Scenario 1: Test to confirm if the resource handlers are added correctly
  Details:
    TestName: shouldAddResourceHandlersSuccessfully.
    Description: This test is meant to check if the resource handlers are added correctly to the resource handler registry.
  Execution:
    Arrange: Mock ResourceHandlerRegistry and ResourceHandlerRegistration.
    Act: Invoke the method addResourceHandlers with the mock ResourceHandlerRegistry.
    Assert: Verify if the addResourceHandler and addResourceLocations methods were called with appropriate parameters.
  Validation:
    This assertion aims to verify that the resource handlers are added to the registry with the right patterns and locations. The success of this test ensures that the resources will be served correctly from the specified locations.

Scenario 2: Test for the null registry
  Details:
    TestName: shouldThrowExceptionIfRegistryIsNull.
    Description: This test is meant to check if the method behaves correctly when a null registry is provided.
  Execution:
    Arrange: No arrangement needed as we are passing a null registry.
    Act: Invoke the method addResourceHandlers with null argument.
    Assert: Expected an IllegalArgumentException.
  Validation:
    This assertion will verify that the method throws IllegalArgumentException when null registry is passed. This is an edge case to ensure that the method can handle erroneous input gracefully.

Scenario 3: Test to check that all resource locations are added
  Details:
    TestName: shouldAddAllResourceLocations.
    Description: This test checks if all resource locations ("/", "/resources/") are added to the resource handler.
  Execution:
    Arrange: Mock ResourceHandlerRegistry and ResourceHandlerRegistration.
    Act: Invoke the method addResourceHandlers with the mock ResourceHandlerRegistry.
    Assert: Verify if the addResourceLocations method was called with both "/" and "/resources/".
  Validation:
    This test verifies that all resource locations are added correctly. This ensures that our web app can serve resources from any of these locations, increasing the flexibility of our resources organization.

Scenario 4: Test when registry is empty
  Details:
    TestName: shouldWorkWithEmptyRegistry.
    Description: This method checks if the function can work correctly when the registry is initially empty.
  Execution:
    Arrange: Create an empty mock of ResourceHandlerRegistry.
    Act: Invoke the method addResourceHandlers with the empty mock ResourceHandlerRegistry.
    Assert: Verify if the addResourceHandler method was called.
  Validation:
    This test verifies that the method works even when the registry is empty.

*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

public class MvcConfigAddResourceHandlersTest {

	@Mock
	private ResourceHandlerRegistry registry;

	@Mock
	private ResourceHandlerRegistration registration;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void shouldAddResourceHandlersSuccessfully() {
		Mockito.when(registry.addResourceHandler("/resources/**")).thenReturn(registration);
		MvcConfig config = new MvcConfig();
		config.addResourceHandlers(registry);
		Mockito.verify(registry, Mockito.times(1)).addResourceHandler("/resources/**");
		Mockito.verify(registration, Mockito.times(1)).addResourceLocations("/", "/resources/");
	}

	@Test
	public void shouldThrowExceptionIfRegistryIsNull() {
		Assertions.assertThrows(NullPointerException.class, () -> {
			MvcConfig config = new MvcConfig();
			config.addResourceHandlers(null);
		});
	}

	// Removing this test case since the addResourceLocations("/") and
	// addResourceLocations("/resources/") are not called one after another, they
	// are called at once with both arguments.
	// @Test
	// public void shouldAddAllResourceLocations() {
	// Mockito.when(registry.addResourceHandler("/resources/**")).thenReturn(registration);
	// MvcConfig config = new MvcConfig();
	// config.addResourceHandlers(registry);
	// Mockito.verify(registration, Mockito.times(1)).addResourceLocations("/");
	// Mockito.verify(registration, Mockito.times(1)).addResourceLocations("/resources/");
	// }

	@Test
	public void shouldWorkWithEmptyRegistry() {
		Mockito.when(registry.addResourceHandler("/resources/**")).thenReturn(registration);
		MvcConfig config = new MvcConfig();
		config.addResourceHandlers(registry);
		Mockito.verify(registry, Mockito.times(1)).addResourceHandler("/resources/**");
	}

}
