// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=addResourceHandlers_ec36c4e322
ROOST_METHOD_SIG_HASH=addResourceHandlers_41a692beca

Here are the JUnit test scenarios for the `addResourceHandlers` method:

Scenario 1: Valid Resource Handler and Location

Details:
  TestName: validResourceHandlerAndLocation
  Description: This test verifies that the `addResourceHandlers` method correctly registers a valid resource handler and location.
Execution:
  Arrange: Create an instance of `ResourceHandlerRegistry` and the target class containing the `addResourceHandlers` method.
  Act: Invoke the `addResourceHandlers` method with the created `ResourceHandlerRegistry` instance.
  Assert: Use `assertEquals` to check if the registered resource handler and location match the expected values.
Validation:
  The assertion verifies that the resource handler "/resources/**" and location "/", "/resources/" are correctly registered in the `ResourceHandlerRegistry`.
  This test ensures that static resources can be served from the specified locations when accessed through the registered resource handler.

Scenario 2: Empty Resource Handler

Details:
  TestName: emptyResourceHandler
  Description: This test checks the behavior of the `addResourceHandlers` method when an empty resource handler is provided.
Execution:
  Arrange: Create an instance of `ResourceHandlerRegistry` and the target class containing the `addResourceHandlers` method.
  Act: Invoke the `addResourceHandlers` method with the created `ResourceHandlerRegistry` instance and an empty resource handler.
  Assert: Use `assertThrows` to verify that an appropriate exception (e.g., `IllegalArgumentException`) is thrown.
Validation:
  The assertion verifies that the method throws an exception when an empty resource handler is provided.
  This test ensures that the method handles invalid input and prevents the registration of an empty resource handler.

Scenario 3: Null Resource Handler Registry

Details:
  TestName: nullResourceHandlerRegistry
  Description: This test verifies the behavior of the `addResourceHandlers` method when a null `ResourceHandlerRegistry` is passed.
Execution:
  Arrange: Create an instance of the target class containing the `addResourceHandlers` method.
  Act: Invoke the `addResourceHandlers` method with a null `ResourceHandlerRegistry` instance.
  Assert: Use `assertThrows` to verify that a `NullPointerException` is thrown.
Validation:
  The assertion verifies that the method throws a `NullPointerException` when a null `ResourceHandlerRegistry` is provided.
  This test ensures that the method handles null input and prevents the registration of resources with a null registry.

Scenario 4: Multiple Resource Handlers and Locations

Details:
  TestName: multipleResourceHandlersAndLocations
  Description: This test verifies that the `addResourceHandlers` method correctly registers multiple resource handlers and locations.
Execution:
  Arrange: Create an instance of `ResourceHandlerRegistry` and the target class containing the `addResourceHandlers` method.
  Act: Invoke the `addResourceHandlers` method with the created `ResourceHandlerRegistry` instance and multiple resource handlers and locations.
  Assert: Use `assertEquals` to check if the registered resource handlers and locations match the expected values.
Validation:
  The assertion verifies that multiple resource handlers and locations are correctly registered in the `ResourceHandlerRegistry`.
  This test ensures that the method can handle the registration of multiple resource handlers and locations simultaneously.

These test scenarios cover different aspects of the `addResourceHandlers` method, including valid input, empty resource handler, null resource handler registry, and multiple resource handlers and locations. They aim to validate the correct behavior of the method and ensure that it handles various scenarios appropriately.
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Before;
import org.junit.Test;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;

import static org.junit.Assert.assertThrows;
import static org.mockito.Mockito.*;

public class MvcConfigAddResourceHandlersTest {

	private MvcConfig mvcConfig;

	private ResourceHandlerRegistry registry;

	@Before
	public void setUp() {
		mvcConfig = new MvcConfig();
		registry = mock(ResourceHandlerRegistry.class);
	}

	@Test
	public void validResourceHandlerAndLocation() {
		// Arrange
		ResourceHandlerRegistry.ResourceHandlerRegistration registration = mock(
				ResourceHandlerRegistry.ResourceHandlerRegistration.class);
		when(registry.addResourceHandler("/resources/**")).thenReturn(registration);
		when(registration.addResourceLocations("/", "/resources/")).thenReturn(registration);

		// Act
		mvcConfig.addResourceHandlers(registry);

		// Assert
		verify(registry).addResourceHandler("/resources/**");
		verify(registration).addResourceLocations("/", "/resources/");
	}

	@Test
	public void emptyResourceHandler() {
		// Arrange
		ResourceHandlerRegistry.ResourceHandlerRegistration registration = mock(
				ResourceHandlerRegistry.ResourceHandlerRegistration.class);
		when(registry.addResourceHandler("")).thenReturn(registration);

		// Act & Assert
		assertThrows(IllegalArgumentException.class, () -> mvcConfig.addResourceHandlers(registry));
		verify(registry, never()).addResourceHandler(anyString());
	}

	@Test
	public void nullResourceHandlerRegistry() {
		// Act & Assert
		assertThrows(NullPointerException.class, () -> mvcConfig.addResourceHandlers(null));
	}

	@Test
	public void multipleResourceHandlersAndLocations() {
		// Arrange
		ResourceHandlerRegistry.ResourceHandlerRegistration registration1 = mock(
				ResourceHandlerRegistry.ResourceHandlerRegistration.class);
		ResourceHandlerRegistry.ResourceHandlerRegistration registration2 = mock(
				ResourceHandlerRegistry.ResourceHandlerRegistration.class);
		when(registry.addResourceHandler("/resources/**")).thenReturn(registration1);
		when(registry.addResourceHandler("/static/**")).thenReturn(registration2);
		when(registration1.addResourceLocations("/", "/resources/")).thenReturn(registration1);
		when(registration2.addResourceLocations("/static/")).thenReturn(registration2);

		// Act
		mvcConfig.addResourceHandlers(registry);

		// Assert
		verify(registry).addResourceHandler("/resources/**");
		verify(registry).addResourceHandler("/static/**");
		verify(registration1).addResourceLocations("/", "/resources/");
		verify(registration2).addResourceLocations("/static/");
	}

}
