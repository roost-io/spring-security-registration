// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=configureDefaultServletHandling_3a0ac0bcff
ROOST_METHOD_SIG_HASH=configureDefaultServletHandling_7958410ece

Here are the JUnit test scenarios for the `configureDefaultServletHandling` method:

Scenario 1: Verify Default Servlet Handling Configuration

Details:
  TestName: defaultServletHandlingEnabled
  Description: This test verifies that the `configureDefaultServletHandling` method correctly enables the default servlet handling when invoked with a `DefaultServletHandlerConfigurer` instance.
Execution:
  Arrange: Create a mock or test double for `DefaultServletHandlerConfigurer`.
  Act: Invoke the `configureDefaultServletHandling` method with the mock or test double.
  Assert: Verify that the `enable` method of the `DefaultServletHandlerConfigurer` is called exactly once.
Validation:
  The assertion ensures that the default servlet handling is enabled as expected when the `configureDefaultServletHandling` method is called. This test is important to validate that the application correctly delegates the handling of static resources and default servlet requests to the container's default servlet.

Scenario 2: Verify Null Configurer Handling

Details:
  TestName: nullConfigurerHandling
  Description: This test verifies that the `configureDefaultServletHandling` method gracefully handles a null `DefaultServletHandlerConfigurer` instance without throwing any exceptions.
Execution:
  Arrange: No specific arrangement required.
  Act: Invoke the `configureDefaultServletHandling` method with a null value as the `configurer` parameter.
  Assert: Verify that no exceptions are thrown during the method execution.
Validation:
  The assertion ensures that the `configureDefaultServletHandling` method does not throw any exceptions when passed a null `configurer` instance. This test is important to validate the robustness of the method and its ability to handle unexpected input without causing the application to fail.

Scenario 3: Verify Multiple Invocations

Details:
  TestName: multipleInvocations
  Description: This test verifies that multiple invocations of the `configureDefaultServletHandling` method with the same `DefaultServletHandlerConfigurer` instance do not cause any unexpected behavior.
Execution:
  Arrange: Create a mock or test double for `DefaultServletHandlerConfigurer`.
  Act: Invoke the `configureDefaultServletHandling` method multiple times with the same mock or test double.
  Assert: Verify that the `enable` method of the `DefaultServletHandlerConfigurer` is called exactly once, regardless of the number of invocations.
Validation:
  The assertion ensures that the default servlet handling is enabled only once, even if the `configureDefaultServletHandling` method is called multiple times with the same `configurer` instance. This test is important to validate that the method behaves consistently and does not introduce any unintended side effects or duplicate configurations.

Note: The actual implementation of the test methods and the specific mocking framework or test doubles used may vary based on your project's setup and requirements.
*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class MvcConfigConfigureDefaultServletHandlingTest {

	@Mock
	private DefaultServletHandlerConfigurer configurer;

	private MvcConfig mvcConfig;

	@BeforeEach
	void setUp() {
		mvcConfig = new MvcConfig();
	}

	@Test
	void defaultServletHandlingEnabled() {
		// Arrange
		// Act
		mvcConfig.configureDefaultServletHandling(configurer);
		// Assert
		verify(configurer, times(1)).enable();
	}

	@Test
	void nullConfigurerHandling() {
		// Arrange
		// Act
		mvcConfig.configureDefaultServletHandling(null);
		// Assert
		// No exception should be thrown
	}

	@Test
	void multipleInvocations() {
		// Arrange
		// Act
		mvcConfig.configureDefaultServletHandling(configurer);
		mvcConfig.configureDefaultServletHandling(configurer);
		mvcConfig.configureDefaultServletHandling(configurer);
		// Assert
		verify(configurer, times(3)).enable();
	}

}
