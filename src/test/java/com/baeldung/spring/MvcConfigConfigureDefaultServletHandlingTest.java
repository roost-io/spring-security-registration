// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=configureDefaultServletHandling_3a0ac0bcff
ROOST_METHOD_SIG_HASH=configureDefaultServletHandling_7958410ece

Scenario 1: Valid Configurer Test

Details:
  TestName: validConfigurerTest
  Description: This test is intended to check if the enable method is called when a valid DefaultServletHandlerConfigurer object is used.
Execution:
  Arrange: Create a mock object for DefaultServletHandlerConfigurer and set its behavior.
  Act: Call the configureDefaultServletHandling method with the mock DefaultServletHandlerConfigurer object.
  Assert: Verify the number of times enable method is called in DefaultServletHandlerConfigurer object.
Validation:
  The assertion checks that DefaultServletHandlerConfigurer's enable method is called once, confirming its successful execution. This is important in ensuring our configuration is applied effectively.

Scenario 2: Null Configurer Test

Details:
  TestName: nullConfigurerTest
  Description: This test is aimed to check if the appropriate exception is thrown when a null configurer is used.
Execution:
  Arrange: Provide null as a parameter.
  Act: Call the configureDefaultServletHandling with null.
  Assert: Expect an appropriate exception.
Validation:
  The assertion checks that an appropriate exception is thrown when a null configurer is used. This is important in ensuring robust error handling in our code.

Scenario 3: Multiple Calls Test

Details:
  TestName: multipleCallsTest
  Description: This test aims to check if multiple calls to configureDefaultServletHandling method result in multiple enable method invocations.
Execution:
  Arrange: Create a mock object for DefaultServletHandlerConfigurer and set its behavior.
  Act: Call configureDefaultServletHandling method multiple times with the mock DefaultServletHandlerConfigurer object.
  Assert: Verify the number of times the enable method is invoked in DefaultServletHandlerConfigurer mock object.
Validation:
  The assertion checks that DefaultServletHandlerConfigurer's enable method is invoked the same number of times as configureDefaultServletHandling was called. This confirms multiple calls are handled correctly, which is crucial to maintain consistency in our configuration.

*/

// ********RoostGPT********
package com.baeldung.spring;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;

import static org.mockito.Mockito.times;

@RunWith(MockitoJUnitRunner.class)
public class MvcConfigConfigureDefaultServletHandlingTest {

	@Test
	public void validConfigurerTest() {
		DefaultServletHandlerConfigurer mockConfigurer = Mockito.mock(DefaultServletHandlerConfigurer.class);
		MvcConfig testMvcConfig = new MvcConfig();
		testMvcConfig.configureDefaultServletHandling(mockConfigurer);
		Mockito.verify(mockConfigurer, times(1)).enable();
	}

	@Test(expected = NullPointerException.class)
	public void nullConfigurerTest() {
		MvcConfig testMvcConfig = new MvcConfig();
		testMvcConfig.configureDefaultServletHandling(null);
	}

	@Test
	public void multipleCallsTest() {
		DefaultServletHandlerConfigurer mockConfigurer = Mockito.mock(DefaultServletHandlerConfigurer.class);
		MvcConfig testMvcConfig = new MvcConfig();
		testMvcConfig.configureDefaultServletHandling(mockConfigurer);
		testMvcConfig.configureDefaultServletHandling(mockConfigurer);
		Mockito.verify(mockConfigurer, times(2)).enable();
	}

}
